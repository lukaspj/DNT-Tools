// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// 
// 

#region

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Threading;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using WinterLeaf.tsObjects;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Tools
{
    public partial class Main : TorqueScriptTemplate
    {
        [Torque_Decorations.TorqueCallBack("", "", "initializeConvexEditor", "", 1, 2500, false)]
        public void initializeConvexEditor(coGuiConvexEditorCtrl thisObj)
        {
            coGuiConvexEditorCtrl ConvexEditorGui = console.GetObjectID("ConvexEditorGui");
            coGuiWindowCollapseCtrl ConvexEditorOptionsWindow = console.GetObjectID("ConvexEditorOptionsWindow");
            coGuiWindowCollapseCtrl ConvexEditorTreeWindow = console.GetObjectID("ConvexEditorTreeWindow");
            coGuiControl ConvexEditorToolbar = console.GetObjectID("ConvexEditorToolbar");
            coGuiContainer EditorGui = console.GetObjectID("EditorGui");
            ConvexEditorGui.setVisible( false );  
            ConvexEditorOptionsWindow.setVisible( false );  
            ConvexEditorTreeWindow.setVisible( false ); 
            ConvexEditorToolbar.setVisible( false );
   
            EditorGui.add( ConvexEditorGui );
            EditorGui.add( ConvexEditorOptionsWindow );
            EditorGui.add( ConvexEditorTreeWindow );
            EditorGui.add( ConvexEditorToolbar );
      
            coScriptObject ConvexEditorPlugin;
            Torque_Class_Helper TCH = new Torque_Class_Helper("ScriptObject");
            TCH.Props.Add("superClass", "EditorPlugin");
            TCH.Props.Add("editorGui", ConvexEditorGui);
            ConvexEditorPlugin = TCH.Create();
      
            // Note that we use the WorldEditor's Toolbar.

            coActionMap map = new Torque_Class_Helper("ActionMap").Create();
            map.bindCmd("keyboard", "1", "ConvexEditorNoneModeBtn.performClick();", "" );  // Select
            map.bindCmd( "keyboard", "2", "ConvexEditorMoveModeBtn.performClick();", "" );  // Move
            map.bindCmd( "keyboard", "3", "ConvexEditorRotateModeBtn.performClick();", "" );// Rotate
            map.bindCmd( "keyboard", "4", "ConvexEditorScaleModeBtn.performClick();", "" ); // Scale
    
            ConvexEditorPlugin["map"] = map;

            //ConvexEditorPlugin.initSettings();
        }

        [Torque_Decorations.TorqueCallBack("", "ConvexEditorPlugin", "onWorldEditorStartup", "", 1, 2500, false)]
        public void ConvexEditorGuiOnWorldEditorStartup(coScriptObject thisObj)
        {
            coGuiContainer EditorGui = console.GetObjectID("EditorGui");
            string accel = "";//EditorGui.addToEditorsMenu( "Sketch Tool", "", ConvexEditorPlugin );
            
            string tooltip = "Sketch Tool ("+accel+")";
            //EditorGui.addToToolsToolbar( "ConvexEditorPlugin", "ConvexEditorPalette", expandFilename("tools/convexEditor/images/convex-editor-btn"), %tooltip );
            
            //connect editor windows
            //GuiWindowCtrl::attach( ConvexEditorOptionsWindow, ConvexEditorTreeWindow);

           // Allocate our special menu.
           // It will be added/removed when this editor is activated/deactivated.
            coPopupMenu ConvexActionsMenu = console.GetObjectID("ConvexActionsMenu");
            if(!ConvexActionsMenu.isObject())
            {
                TorqueSingleton TS = new TorqueSingleton("PopupMenu", "ConvexActionsMenu");
                TS.Props.Add("superClass", "MenuBuilder");
                TS.Props.Add("barTitle", "Sketch");
                TS.Props.Add("Item[0]", "Hollow Selected Shape\t\tConvexEditorGui.hollowSelection();");
                TS.Props.Add("Item[1]", "Recenter Selected Shape\t\tConvexEditorGui.recenterSelection();");
            }

            thisObj["popupMenu"] = ConvexActionsMenu;
            
            coGuiWindowCollapseCtrl ESettingsWindow = console.GetObjectID("ESettingsWindow");
            //ESettingsWindow.addTabPage( EConvexEditorSettingsPage );
        }
        /*
        [Torque_Decorations.TorqueCallBack("", "ConvexEditorPlugin", "onSleep", "", 1, 2500, false)]
        public void ConvexEditorPluginOnSleep(coScriptObject thisObj)
        {
        }

        [Torque_Decorations.TorqueCallBack("", "ConvexEditorPlugin", "onSleep", "", 1, 2500, false)]
        public void ConvexEditorPluginOnSleep(coScriptObject thisObj)
        {
        }*/
    }
}
