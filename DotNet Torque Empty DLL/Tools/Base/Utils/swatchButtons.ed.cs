// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// 
// 

#region

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Threading;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using WinterLeaf.tsObjects;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Tools
{
    public partial class Main : TorqueScriptTemplate
    {
        [Torque_Decorations.TorqueCallBack("", "GuiSwatchButtonCtrl", "onMouseDragged", "", 1, 2500, false)]
        public void GuiSwatchButtonCtrlOnMouseDragged(coGuiSwatchButtonCtrl thisObj)
        {
            coGuiCanvas Canvas = (coGuiCanvas)console.GetObjectID("Canvas");

            coGuiSwatchButtonCtrl payload = new Torque_Class_Helper("GuiSwatchButtonCtrl").Create();
            payload.assignFieldsFrom(thisObj);
            payload.position = new Point2I(0, 0);
            payload["dragSourceControl"] = thisObj;

            int xOffset = payload.extent.x / 2;
            int yOffset = payload.extent.y / 2;
            Point2I cursorPos = Canvas.getCursorPos();
            int xPos = cursorPos.x - xOffset;
            int yPos = cursorPos.y - yOffset;

            coGuiDragAndDropControl ctrl;
            Torque_Class_Helper TCH = new Torque_Class_Helper("GuiDragAndDropControl");
            TCH.Props.Add("canSaveDynamicFields", "1");
            TCH.Props.Add("Profile", "ToolsGuiSolidDefaultProfile");
            TCH.Props.Add("HorizSizing", "right");
            TCH.Props.Add("vertSizing", "bottom");
            TCH.Props.Add("Position", new Point2I(xPos, yPos).AsString());
            TCH.Props.Add("extent", payload.extent.AsString());
            TCH.Props.Add("MinExtent", "4 4");
            TCH.Props.Add("canSave", "1");
            TCH.Props.Add("Visible", "1");
            TCH.Props.Add("hovertime", "1000");
            TCH.Props.Add("deleteOnMouseUp", "true");
            TCH.Props.Add("class", "GuiDragAndDropControlType_ColorSwatch");
            ctrl = TCH.Create();

            ctrl.add(payload);
            
            // Start drag.

            ((coSimSet)Canvas.getContent()).add(ctrl);
            ctrl.startDragging(xOffset, yOffset);
        }

        [Torque_Decorations.TorqueCallBack("", "GuiSwatchButtonCtrl", "onControlDropped", "", 1, 2500, false)]
        public void GuiSwatchButtonCtrlOnControlDropped(coGuiSwatchButtonCtrl thisObj, coGuiSwatchButtonCtrl payload, Point2I position)
        {
            if (!payload.parentGroup.isInNamespaceHierarchy("GuiDragAndDropControlType_ColorSwatch"))
                return;

            // If dropped on same button whence we came from,
            // do nothing.

            if (payload["dragSourceControl"] == thisObj)
                return;

            // If a swatch button control is dropped onto this control,
            // copy it's color.
            if (payload.isMemberOfClass("GuiSwatchButtonCtrl"))
            {
                // If the swatch button is part of a color-type inspector field,
                // remember the inspector field so we can later set the color
                // through it.

                if (thisObj.parentGroup.isMemberOfClass("GuiInspectorTypeColorI"))
                    thisObj.parentGroup.call("apply", new string[] { new Point2I(payload.color.AsString()).AsString() });
                else if (thisObj.parentGroup.isMemberOfClass("GuiInspectorTypeColorF"))
                    thisObj.parentGroup.call("apply", new string[] { payload.color.AsString() });
                else
                    thisObj.setColor(payload.color.AsString());
            }
        }
    }
}
