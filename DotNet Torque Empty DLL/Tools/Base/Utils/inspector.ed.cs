// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// 
// 

#region

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Threading;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using WinterLeaf.tsObjects;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Tools
{
    public partial class Main : TorqueScriptTemplate
    {
        // Adds one item to the menu.
        // if %item is skipped or "", we will use %item[#], which was set when the menu was created.
        // if %item is provided, then we update %item[#].
        [Torque_Decorations.TorqueCallBack("", "EditorInspectorBase", "onAdd", "", 1, 2500, false)]
        public void EditorInspectorBaseOnAdd(coGuiInspector thisObj)
        {
            if(!console.isObject("EditorInspectorBaseDatablockFieldPopup"))
            {
                Torque_Class_Helper TCH = new Torque_Class_Helper("PopupMenu", "EditorInspectorBaseDatablockFieldPopup");
                TCH.Props.Add("superClass", "MenuBuilder");
                TCH.Props.Add("isPopup", "true");
                TCH.Props.Add("item[0]", "Edit Datablock\t\tDatablockEditorPlugin.openDatablock( %this.inspectorField.getData() );");
                TCH.Props.Add("item[1]", "Jump to Definition in Torsion\t\tEditorOpenDeclarationInTorsion( %this.inspectorField.getData() );");
                TCH.Props.Add("item[2]", "Inspect Object\t\tinspectObject( %this.inspectorField.getData() );");
                TCH.Props.Add("item[3]", "-");
                TCH.Props.Add("item[4]", "Copy Value\t\tsetClipboard( %this.inspectorField.getData() );");
                TCH.Props.Add("item[5]", "Paste Value\t\t%this.inspectorField.apply( getClipboard() );");
                TCH.Props.Add("item[6]", "Reset to Default\t\t%this.inspectorField.reset();");
                TCH.Props.Add("inspectorField", "-1");
                TCH.Create();
            }

            if (!console.isObject("EditorInspectorBaseFieldPopup"))
            {
                Torque_Class_Helper TCH = new Torque_Class_Helper("PopupMenu", "EditorInspectorBaseFieldPopup");
                TCH.Props.Add("superClass", "MenuBuilder");
                TCH.Props.Add("isPopup", "true");
                TCH.Props.Add("item[0]", "Inspect Object\t\tinspectObject( %this.inspectorField.getData() );");
                TCH.Props.Add("item[1]", "Jump to Definition in Torsion\t\tEditorOpenDeclarationInTorsion( %this.inspectorField.getData() );");
                TCH.Props.Add("item[2]", "-");
                TCH.Props.Add("item[3]", "Copy Value\t\tsetClipboard( %this.inspectorField.getData() );");
                TCH.Props.Add("item[4]", "Paste Value\t\t%this.inspectorField.apply( getClipboard() );");
                TCH.Props.Add("item[5]", "Reset to Default\t\t%this.inspectorField.reset();");
                TCH.Props.Add("inspectorField", "-1");
                TCH.Create();
            }

            if (!console.isObject("EditorInspectorBaseFileFieldPopup"))
            {
                Torque_Class_Helper TCH = new Torque_Class_Helper("PopupMenu", "EditorInspectorBaseFileFieldPopup");
                TCH.Props.Add("superClass", "MenuBuilder");
                TCH.Props.Add("isPopup", "true");
                TCH.Props.Add("item[0]", "Open File\t\topenFile( %this.filePath );");
                TCH.Props.Add("item[1]", "Open Folder\t\topenFolder( %this.folderPath );");
                TCH.Props.Add("item[2]", "-");
                TCH.Props.Add("item[3]", "Copy Value\t\tsetClipboard( %this.inspectorField.getData() );");
                TCH.Props.Add("item[4]", "Paste Value\t\t%this.inspectorField.apply( getClipboard() );");
                TCH.Props.Add("item[5]", "Reset to Default\t\t%this.inspectorField.reset();");
                TCH.Props.Add("inspectorField", "-1");
                TCH.Props.Add("folderPath", "");
                TCH.Props.Add("filePath", "");
                TCH.Create();
            }

            if (!console.isObject("EditorInspectorBaseProfileFieldPopup"))
            {
                Torque_Class_Helper TCH = new Torque_Class_Helper("PopupMenu", "EditorInspectorBaseProfileFieldPopup");
                TCH.Props.Add("superClass", "MenuBuilder");
                TCH.Props.Add("isPopup", "true");
                TCH.Props.Add("item[0]", "Edit Profile\t\tif( !$InGuiEditor ) toggleGuiEditor( true ); GuiEditor.editProfile( %this.inspectorField.getData() );");
                TCH.Props.Add("item[1]", "Jump to Definition in Torsion\t\tEditorOpenDeclarationInTorsion( %this.inspectorField.getData() );");
                TCH.Props.Add("item[2]", "Inspect Object\t\tinspectObject( %this.inspectorField.getData() );");
                TCH.Props.Add("item[3]", "-");
                TCH.Props.Add("item[4]", "Copy Value\t\tsetClipboard( %this.inspectorField.getData() );");
                TCH.Props.Add("item[5]", "Paste Value\t\t%this.inspectorField.apply( getClipboard() );");
                TCH.Props.Add("item[6]", "Reset to Default\t\t%this.inspectorField.reset();");
                TCH.Props.Add("inspectorField", "-1");
                TCH.Props.Add("folderPath", "");
                TCH.Props.Add("filePath", "");
                TCH.Create();
            }
        }

        [Torque_Decorations.TorqueCallBack("", "EditorInspectorBase", "onFieldRightClick", "", 2, 2500, false)]
        public void EditorInspectorBaseOnFieldRightClick(coGuiInspector thisObj, coGuiInspectorField field)
        {
            coSimObject obj = thisObj.getInspectObject();
            string fieldValue = field.getData();

            int inspectFieldIndex = -1;
            int openFileIndex = -1;
            int openFolderIndex = -1;

            int inspectIndex = -1;
            int jumpToIndex = -1;
            bool isObject = false;

            // Find out if this is a TypeFilename field referring to a shape file.

            bool isShapeFilenameField = false;
            if (field.getInspectedFieldName().Equals("shapeName"))
                isShapeFilenameField =
                    obj.isMemberOfClass("PhysicsShape") ||
                    obj.isMemberOfClass("TSStatic");
            else if(field.getInspectedFieldName().Equals("shapeFile"))
                isShapeFilenameField = 
                 obj.isMemberOfClass( "ShapeBaseData" ) ||
                 obj.isMemberOfClass( "ShapeBaseImageData" ) ||
                 obj.isMemberOfClass( "ForestItemData" ) ||
                 obj.isMemberOfClass( "WheeledVehicleTire" ) ||
                 obj.isMemberOfClass( "fxShapeReplicator" ) ||
                 obj.isMemberOfClass( "RenderShapeExample" ) ||
                 obj.isMemberOfClass( "DebrisData" );
            coPopupMenu popup = "";
            // Select the popup.
            if (isShapeFilenameField)
            {
                popup = console.GetObjectID("EditorInspectorBaseShapeFieldPopup");
                openFileIndex = 2;
                openFolderIndex = 3;
            }
            else if (EditorInspectorBaseIsFileTypeField(field))
            {
                popup = console.GetObjectID("EditorInspectorBaseFileFieldPopup");
                openFileIndex = 0;
                openFolderIndex = 1;
            }
            else
            {
                switch (field.getClassName())
                {
                    case "GuiInspectorCustomField":
                        if (!field.getInspectedFieldName().Equals("parentGroup"))
                            return;
                        break;

                    case "GuiInspectorTypeGuiProfile":
                        popup = console.GetObjectID("EditorInspectorBaseProfileFieldPopup");
                        popup.enableItem("0", console.isObject(fieldValue).AsString());
                        inspectIndex = 2;
                        jumpToIndex = 1;
                        break;

                    case "GuiInspectorDatablockField":
                    case "GuiInspectorTypeSFXDescriptionName":
                    case "GuiInspectorTypeSFXEnvironmentName":
                    case "GuiInspectorTypeSFXTrackName":
                    case "GuiInspectorTypeSFXAmbienceName":
                    case "GuiInspectorTypeSFXSourceName":
                        popup = console.GetObjectID("EditorInspectorBaseDatablockFieldPopup");
                        popup.enableItem("0", console.isObject(fieldValue).AsString());
                        inspectIndex = 2;
                        jumpToIndex = 1;
                        break;

                    default:
                        popup = console.GetObjectID("EditorInspectorBaseFieldPopup");
                        inspectIndex = 0;
                        jumpToIndex = 1;
                        break;
                }
            }
            if (inspectIndex != -1)
            {
                isObject = false;
                if (EditorInspectorBaseIsObjectTypeField(field))
                    isObject = console.isObject(fieldValue);
                if (!popup.isObject())
                    return;
                popup.enableItem(inspectIndex.AsString(), isObject.AsString());
                popup.enableItem(jumpToIndex.AsString(), isObject.AsString());
            }
            if (openFileIndex != -1 || openFolderIndex != -1)
            {
                string fullPath = EditorInspectorBaseGetFullFilePath(field);
                if (!popup.isObject())
                    return;
                popup["filePath"] = fullPath;
                popup["folderPath"] = Util.filePath(fullPath);

                if (openFileIndex != -1)
                    popup.enableItem("0", Util.isFile(fullPath).AsString());
                if (openFolderIndex != -1)
                    popup.enableItem("1", Util.IsDirectory(popup["folderPath"]).AsString());
            }
            if (!popup.isObject())
                return;
            popup["inspectorField"] = field;
            popup.showPopup(console.GetObjectID("Canvas").AsString());
        }

        [Torque_Decorations.TorqueCallBack("", "EditorInspectorBase", "isObjectTypeField", "", 1, 2500, false)]
        public bool EditorInspectorBaseIsObjectTypeField(coGuiInspectorField field)
        {
            // Inspector field types that refer to objects.
   
            switch( field.getClassName() )
            {
                case "GuiInspectorDatablockField":
                case "GuiInspectorTypeSFXDescriptionName":
                case "GuiInspectorTypeSFXEnvironmentName":
                case "GuiInspectorTypeSFXTrackName":
                case "GuiInspectorTypeSFXAmbienceName":
                case "GuiInspectorTypeSFXSourceName":
                case "GuiInspectorTypeGuiProfile":
                    return true;
            }
   
            // Other console types that refer to objects.
   
            switch( field.getInspectedFieldType() )
            {
                case "TypeSimObject":
                case "TypeSimObjectName":
                case "TypeMaterialName":
                case "TypeCubemapName":
                case "TypeGuiProfile":
                    return true;
            }
   
            return false;
        }

        [Torque_Decorations.TorqueCallBack("", "EditorInspectorBase", "isFileTypeField", "", 1, 2500, false)]
        public bool EditorInspectorBaseIsFileTypeField(coGuiInspectorField field)
        {
            return field.isMemberOfClass("GuiInspectorTypeFileName");
        }

        [Torque_Decorations.TorqueCallBack("", "EditorInspectorBase", "getFullFilePath", "", 1, 2500, false)]
        public string EditorInspectorBaseGetFullFilePath(coGuiInspectorField field)
        {
            string fileName = field.getData();
            coGuiInspector inspector = field.getInspector();
            coSimObject obj = inspector.getInspectObject();

            if(obj.isMemberOfClass( "material" ))
            {
                string objPath = Util.filePath(Util.makeFullPath(obj.getFilename(), Util.getMainDotCsDir()));
                return Util.makeFullPath(fileName, objPath);
            }
            else
                return Util.makeFullPath(fileName, Util.getMainDotCsDir());
        }
    }
}
