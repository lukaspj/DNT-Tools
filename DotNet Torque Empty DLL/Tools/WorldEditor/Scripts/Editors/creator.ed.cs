// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// 
// 

#region

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Threading;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using WinterLeaf.tsObjects;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Tools
{
    public partial class Main : TorqueScriptTemplate
    {
        public coSimObject genericCreateObject(string objClass)
        {
            if (!Util.isClass(objClass))
            {
                console.warn("createObject( " + objClass + " ) - Was not a valid class." );
                return "";
            }

            coSimObject obj = EWCreatorWindowCreateObject(objClass);
            return obj;
        }

        public coSimObject EWCreatorWindowCreateObject(string objClass)
        {
            coGuiWindowCtrl thisObj = console.GetObjectID("EWCreatorWindow");
            if(!bGlobal["$missionRunning"])
                return "";
            coSimGroup MissionGroup = console.GetObjectID("MissionGroup");
            if(console.isFunction("getObjectLimit") && MissionGroup.getFullCount() >= console.Call("getObjectLimit").AsInt())
            {
                console.Call("MessageBoxOKBuy", new string[] { "You have exceeded the object limit of " + console.Call("getObjectLimit()") + " for this demo. You can remove objects if you would like to add more.", "", "Canvas.showPurchaseScreen(\"objectlimit\");" });
                return "";
            }
            coSimGroup objectGroup = thisObj["objectGroup"];
            if(!objectGroup.isObject())
                EWCreatorWindowSetNewObjectGroup(MissionGroup);

            Util._pushInstantGroup();
            coSimObject obj = new Torque_Class_Helper(objClass).Create();
            Util._popInstantGroup();

            if(obj.isObject())
                EWCreatorWindowOnFinishCreateObject(obj);

            return obj;
        }

        public void EWCreatorWindowSetNewObjectGroup(coSimGroup group)
        {
            coGuiWindowCtrl thisObj = console.GetObjectID("EWCreatorWindow");
            coSimGroup objectGroup = thisObj["objectGroup"];
            coGuiTreeViewCtrl EditorTree = console.GetObjectID("EditorTree");
            if(objectGroup.isObject())
            {
                int oldItem = EditorTree.findItemByObjectId(objectGroup);
                if(oldItem > 0)
                    EditorTree.markItem(oldItem.AsString(), false.AsString());
            }
            thisObj["objectGroup"] = group;
            int Item = EditorTree.findItemByObjectId(group);
            EditorTree.markItem(Item.AsString());
        }

        public void EWCreatorWindowOnFinishCreateObject(coSimObject obj)
        {
            coGuiWindowCtrl thisObj = console.GetObjectID("EWCreatorWindow");
            coSimGroup objectGroup = thisObj["objectGroup"];

            objectGroup.add(obj);
            if(obj.isMemberOfClass( "SceneObject" ))
            {
                coSceneObject sceneObj = (coSceneObject)obj;
                sceneObj.position = new TransformF(EWCreatorWindowGetCreateObjectPosition());

                //flush new position
                sceneObj.setTransform(sceneObj.getTransform());
            }

            EWCreatorWindowOnObjectCreated(obj);
        }

        public Point3F EWCreatorWindowGetCreateObjectPosition()
        {
            coGameConnection LocalClientConnection = console.GetObjectID("LocalClientConnection");
            string focusPoint = ((coShapeBase)LocalClientConnection.getControlObject()).getLookAtPoint(2000, int.MaxValue);
            string[] focusPointSplit = focusPoint.Split(' ');
            if(focusPoint.Equals(""))
                return new Point3F(0);
            return new Point3F(focusPointSplit[0] + focusPointSplit[1] + focusPointSplit[2]);
        }

        public void EWCreatorWindowOnObjectCreated(coSimObject obj)
        {
            coGuiWindowCtrl thisObj = console.GetObjectID("EWCreatorWindow");
            coGuiTreeViewCtrl EditorTree = console.GetObjectID("EditorTree");
            coWorldEditor EWorldEditor = console.GetObjectID("EWorldEditor");
            
            // Can we submit an undo action?
            if(obj.isObject())
                console.print("MECreateUndoAction::submit - Not implemented - 1");//MECreateUndoAction::submit(obj);
            EditorTree.clearSelection();
            EWorldEditor.clearSelection();
            EWorldEditor.selectObject(obj);

           // When we drop the selection don't store undo
           // state for it... the creation deals with it.
            EWorldEditor.dropSelection(true.AsString());
        }
    }
}
