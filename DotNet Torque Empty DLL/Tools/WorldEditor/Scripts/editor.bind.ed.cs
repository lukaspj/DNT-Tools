// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// 
// 

#region

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Threading;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using WinterLeaf.tsObjects;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Tools
{
    public partial class Main : TorqueScriptTemplate
    {
        [Torque_Decorations.TorqueCallBack("", "", "initialize", "", 1, 2500, true)]
        public void EditorBindInitialize(coGuiConvexEditorCtrl thisObj)
        {
            coActionMap EditorMap = new Torque_Class_Helper("ActionMap", "EditorMap").Create();
            EditorMap.bind("mouse", "xaxis", "editorYaw");
            EditorMap.bind("mouse", "yaxis", "editorPitch");
            EditorMap.bind("mouse", "zaxis", "mouseWheelScroll");

            EditorMap.bind("mouse", "alt zaxis", "editorWheelFadeScroll");
        }

        [Torque_Decorations.TorqueCallBack("", "", "mouseWheelScroll", "", 1, 2500, false)]
        public void EditorMouseWheelScroll(float val)
        {
            float rollAdj = console.Call("getMouseAdjustAmount", new string[] { val.AsString() }).AsInt();
            rollAdj = Util.mClamp(rollAdj, -Util.mPi() + 0.01f, Util.mPi() - 0.01f);
            fGlobal["$mvRoll"] += rollAdj;
        }

        [Torque_Decorations.TorqueCallBack("", "", "editorYaw", "", 1, 2500, false)]
        public void EditorYaw(float val)
        {
            float yawAdj = console.Call("getMouseAdjustAmount", new string[] { val.AsString() }).AsInt();
            coGameConnection ServerConnection = console.GetObjectID("ServerConnection");
            coWorldEditor EWorldEditor = console.GetObjectID("EWorldEditor");
            if (ServerConnection.isControlObjectRotDampedCamera() || EWorldEditor.isMiddleMouseDown())
            {
                yawAdj = Util.mClamp(yawAdj, -Util.m2Pi() + 0.01f, Util.m2Pi() - 0.01f);
                yawAdj *= 0.5f;
            }

            coSettings EditorSettings = console.GetObjectID("EditorSettings");
            if (EditorSettings.value("Camera/invertXAxis").AsBool())
                yawAdj *= -1;
            fGlobal["$mvYaw"] += yawAdj;
        }

        [Torque_Decorations.TorqueCallBack("", "", "editorPitch", "", 1, 2500, false)]
        public void EditorPitch(float val)
        {
            float pitchAdj = console.Call("getMouseAdjustAmount", new string[] { val.AsString() }).AsInt();
            coGameConnection ServerConnection = console.GetObjectID("ServerConnection");
            coWorldEditor EWorldEditor = console.GetObjectID("EWorldEditor");
            if (ServerConnection.isControlObjectRotDampedCamera() || EWorldEditor.isMiddleMouseDown())
            {
                pitchAdj = Util.mClamp(pitchAdj, -Util.m2Pi() + 0.01f, Util.m2Pi() - 0.01f);
                pitchAdj *= 0.5f;
            }

            coSettings EditorSettings = console.GetObjectID("EditorSettings");
            if (EditorSettings.value("Camera/invertYAxis").AsBool())
                pitchAdj *= -1;
            fGlobal["$mvPitch"] += pitchAdj;
        }

        [Torque_Decorations.TorqueCallBack("", "", "editorWheelFadeScroll", "", 1, 2500, false)]
        public void EditorWheelFadeScroll(float val)
        {
            coWorldEditor EWorldEditor = console.GetObjectID("EWorldEditor");
            EWorldEditor.fadeIconsDist += val * 0.1f;
            if (EWorldEditor.fadeIconsDist < 0)
                EWorldEditor.fadeIconsDist = 0;
        }
    }
}
