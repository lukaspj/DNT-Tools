// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// 
// 

#region

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Threading;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using WinterLeaf.tsObjects;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Tools
{
    public partial class Main : TorqueScriptTemplate
    {
        [Torque_Decorations.TorqueCallBack("", "", "editorEdInitialize", "", 0, 2500, true)]
        public void EditorEdInitialize()
        {
            coActionMap GlobalActionMap = console.GetObjectID("GlobalActionMap");
            GlobalActionMap.bind("keyboard", "f11", "toggleEditor");
            Util.activatePackage("EditorDisconnectOverride");
        }

        [Torque_Decorations.TorqueCallBack("", "Editor", "create", "", 0, 2500, false)]
        public void EditorCreate()
        {
            Torque_Class_Helper TCH = new Torque_Class_Helper("EditManager", "Editor");
            TCH.Props.Add("profile", "GuiContentProfile");
            TCH.Props.Add("horizSizing", "right");
            TCH.Props.Add("vertSizing", "top");
            TCH.Props.Add("position", "0 0");
            TCH.Props.Add("extent", "640 480");
            TCH.Props.Add("minExtent", "8 8");
            TCH.Props.Add("visible", "1");
            TCH.Props.Add("setFirstResponder", "0");
            TCH.Props.Add("modal", "1");
            TCH.Props.Add("helpTag", "0");
            TCH.Props.Add("open", "false");
            TCH.Create();
        }

        [Torque_Decorations.TorqueCallBack("", "Editor", "getUndoManager", "", 1, 2500, false)]
        public coUndoManager EditorGetUndoManager(coEditManager thisObj)
        {
            if (!console.isObject(thisObj["undoManager"]))
            {
                /// This is the global undo manager used by all
                /// of the mission editor sub-editors.
                coUndoManager udm = new Torque_Class_Helper("UndoManager", "EUndoManager").Create();
                udm.numLevels = 200;
                thisObj["undoManager"] = udm;
            }
            return thisObj["undoManager"];
        }

        [Torque_Decorations.TorqueCallBack("", "Editor", "setUndoManager", "", 2, 2500, false)]
        public void EditorSetUndoManager(coEditManager thisObj, coUndoManager udm)
        {
            thisObj["undoManager"] = udm;
        }

        [Torque_Decorations.TorqueCallBack("", "Editor", "onAdd", "", 1, 2500, false)]
        public void EditorSetOnAdd(coEditManager thisObj)
        {
            // Ignore Replicated fxStatic Instances.
            coWorldEditor EWorldEditor = console.GetObjectID("EWorldEditor");
            EWorldEditor.ignoreObjClass("fxShapeReplicatedStatic");
        }

        [Torque_Decorations.TorqueCallBack("", "Editor", "checkActiveLoadDone", "", 1, 2500, false)]
        public bool EditorSetCheckActiveLoadDone()
        {
            coGuiContainer EditorGui = console.GetObjectID("EditorGui");
            if (EditorGui.isObject() && EditorGui["loadingMission"].AsBool())
            {
                coGuiCanvas Canvas = console.GetObjectID("Canvas");
                Canvas.setContent(EditorGui);
                EditorGui["loadingMission"] = false.AsString();
                return true;
            }
            return false;
        }

        [Torque_Decorations.TorqueCallBack("", "", "toggleEditor", "", 1, 2500, false)]
        public void ToggleEditor(bool make)
        {
            coGuiCanvas Canvas = console.GetObjectID("Canvas");
            coEditManager Editor = console.GetObjectID("Editor");
            coSimGroup MissionCleanup = console.GetObjectID("MissionCleanup");
            coGuiControl EditorLoadingGui = console.GetObjectID("EditorLoadingGui");
            coLevelInfo theLevelInfo = console.GetObjectID("theLevelInfo");
            coGuiControl ChooseLevelDlg = console.GetObjectID("ChooseLevelDlg");

            if (Canvas.isFullscreen())
            {
                console.Call("MessageBoxOK", new string[] { "Windowed Mode Required", "Please switch to windowed mode to access the Mission Editor." });
                return;
            }

            if (make)
            {
                tsObject timer = console.Call("startPrecisionTimer");

                if (bGlobal["$InGuiEditor"])
                    console.Call("GuiEdit");

                if (!bGlobal["$missionRunning"])
                {
                    // Flag saying, when level is chosen, launch it with the editor open.
                    ChooseLevelDlg["launchInEditor"] = true.AsString();
                    Canvas.pushDialog(ChooseLevelDlg);
                }
                else
                {
                    Util._pushInstantGroup();
                    if (Editor.isObject())
                    {
                        EditorCreate();
                        MissionCleanup.add(Editor);
                        MissionCleanup.add(EditorGetUndoManager(Editor));
                    }

                    if (console.Call("EditorIsActive").AsBool())
                    {
                        if (theLevelInfo["type"].Equals("DemoScene"))
                        {
                            console.commandToServer("dropPlayerAtCamera");
                            Editor.call("close", new string[] { "SceneGui" });
                        }
                        else
                            Editor.call("close", new string[] { "PlayGui" });
                    }
                    else
                    {
                        if (!bGlobal["$GuiEditorBtnPressed"])
                        {
                            Canvas.pushDialog(EditorLoadingGui);
                            Canvas.repaint(0);
                        }
                        else
                            bGlobal["$GuiEditorBtnPressed"] = false;
                        Editor.call("open");

                        // Cancel the scheduled event to prevent
                        // the level from cycling after it's duration
                        // has elapsed.
                        Util._cancel(sGlobal["$Game::Schedule"]);

                        if (theLevelInfo["type"].Equals("DemoScene"))
                            console.commandToServer("dropPlayerAtCamera", new string[] { true.AsString() });

                        Canvas.popDialog(EditorLoadingGui);
                    }
                    Util._popInstantGroup();
                }
                float elapsed = console.Call("stopPrecisionTimer", new string[] { timer }).AsFloat();
                console.warn("Time spent in toggleEditor() : " + elapsed / 1000.0f + " s");
            }
        }

        [Torque_Decorations.TorqueCallBack("EditorDisconnectOverride", "", "disconnect", "", 0, 2500, false)]
        public void EditorDisconnectOverrideDisconnect(int nameSpaceDepth)
        {
            coEditManager Editor = console.GetObjectID("Editor");
            coGuiChunkedBitmapCtrl UnifiedMainMenuGui = console.GetObjectID("UnifiedMainMenuGui");
            coGuiChunkedBitmapCtrl MainMenuGui = console.GetObjectID("MainMenuGui");
            if(Editor.isObject() && Editor.call("isEditorEnabled").AsBool())
            {
                if (MainMenuGui.isObject())
                    Editor.call("close", new string[] { "MainMenuGui" });
            }
            console.ParentExecute("disconnect", nameSpaceDepth - 1, new string[] { });
        }
    }
}
