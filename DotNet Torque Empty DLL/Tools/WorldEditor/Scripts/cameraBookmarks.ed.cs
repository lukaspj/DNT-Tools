// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// 
// 

#region

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Threading;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using WinterLeaf.tsObjects;

using DNT_Empty_DLL.Tools.WorldEditor.Scripts.Classes;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Tools
{
    public partial class Main : TorqueScriptTemplate
    {
        #region CameraBookmark
        [Torque_Decorations.TorqueCallBack("", "CameraBookmark", "onAdd", "", 1, 2500, false)]
        public void CameraBookmarkOnAdd(coMissionMarkerData thisObj)
        {

        }

        [Torque_Decorations.TorqueCallBack("", "CameraBookmark", "onRemove", "", 1, 2500, false)]
        public void CameraBookmarkOnRemove(coMissionMarkerData thisObj)
        {
            coPopupMenu EditorCameraBookmarks = console.GetObjectID("EditorCameraBookmarks");
            if (EditorCameraBookmarks.isObject())
            {
                coSimGroup CameraBookmarks = console.GetObjectID("CameraBookmarks");
                int pos = CameraBookmarks.getObjectIndex(thisObj);
                if (pos != -1)
                {
                    EditorCameraBookmarksMenuDeleteItem(EditorCameraBookmarks, pos);
                    ((coGuiWindowCollapseCtrl)console.GetObjectID("EManageBookmarks")).call("deleteBookmark", new string[] { thisObj, pos.AsString() });
                }
            }
        }

        [Torque_Decorations.TorqueCallBack("", "CameraBookmark", "onGroupAdd", "", 1, 2500, false)]
        public void CameraBookmarkOnGroupAdd(coMissionMarkerData thisObj)
        {
            // If we're added to the CameraBookmarks group, then also add us
            // to the menu and Manage Bookmarks window.
            coSimGroup CameraBookmarks = console.GetObjectID("CameraBookmarks");
            if (CameraBookmarks.isObject())
            {
                int pos = CameraBookmarks.getObjectIndex(thisObj);
                if (pos != -1)
                {
                    coPopupMenu EditorCameraBookmarks = console.GetObjectID("EditorCameraBookmarks");
                    EditorCameraBookmarksMenuAddItem(EditorCameraBookmarks, pos, thisObj.internalName);
                    ((coGuiWindowCollapseCtrl)console.GetObjectID("EManageBookmarks")).call("addBookmark", new string[] { thisObj, pos.AsString() });
                }
            }
        }

        [Torque_Decorations.TorqueCallBack("", "CameraBookmark", "onGroupRemove", "", 1, 2500, false)]
        public void CameraBookmarkOnGroupRemove(coMissionMarkerData thisObj)
        {
            // If we're part of the CameraBookmarks group, then also remove us from
            // the menu and Manage Bookmarks window.
            coSimGroup CameraBookmarks = console.GetObjectID("CameraBookmarks");
            if (CameraBookmarks.isObject())
            {
                int pos = CameraBookmarks.getObjectIndex(thisObj);
                if (pos != -1)
                {
                    coPopupMenu EditorCameraBookmarks = console.GetObjectID("EditorCameraBookmarks");
                    EditorCameraBookmarksMenuDeleteItem(EditorCameraBookmarks, pos);
                    ((coGuiWindowCollapseCtrl)console.GetObjectID("EManageBookmarks")).call("deleteBookmark", new string[] { thisObj, pos.AsString() });
                }
            }
        }

        [Torque_Decorations.TorqueCallBack("", "CameraBookmark", "onInspectPostApply", "", 1, 2500, false)]
        public void CameraBookmarkOnInspectPostApply(coMissionMarkerData thisObj)
        {
            coPopupMenu EditorCameraBookmarks = console.GetObjectID("EditorCameraBookmarks");
            EditorCameraBookmarksMenuRebuildBookmarks(EditorCameraBookmarks);
        }
        #endregion

        #region EditorCameraBookmarksMenu

        [Torque_Decorations.TorqueCallBack("", "EditorCameraBookmarksMenu", "onAdd", "", 1, 2500, false)]
        public void EditorCameraBookmarksMenuOnAdd(coPopupMenu thisObj)
        {
            coGuiCanvas Canvas = thisObj["canvas"];
            if (!Canvas.isObject())
                thisObj["canvas"] = console.GetObjectID("Canvas").AsString();

            // Add any existing bookmarks
            EditorCameraBookmarksMenuRebuildBookmarks(thisObj);
        }

        [Torque_Decorations.TorqueCallBack("", "EditorCameraBookmarksMenu", "addItem", "", 1, 2500, false)]
        public void EditorCameraBookmarksMenuAddItem(coPopupMenu thisObj, int pos, string name)
        {
            if (thisObj["NoneItem"].AsBool() == true)
            {
                thisObj["NoneItem"] = false.AsString();
                thisObj.removeItem("0");
            }
            string accel = "";
            thisObj.insertItem(pos.AsString(), name != "-" ? name : "", accel);
        }

        [Torque_Decorations.TorqueCallBack("", "EditorCameraBookmarksMenu", "deleteItem", "", 1, 2500, false)]
        public void EditorCameraBookmarksMenuDeleteItem(coPopupMenu thisObj, int pos)
        {
            thisObj.removeItem(pos.AsString());
            if (thisObj.getItemCount() == 0 && thisObj["NoneItem"].AsBool() != true)
            {
                EditorCameraBookmarksMenuAddItem(thisObj, pos, "None");
                thisObj.enableItem("0", "false");
                thisObj["NoneItem"] = true.AsString();
            }
        }

        [Torque_Decorations.TorqueCallBack("", "EditorCameraBookmarksMenu", "onSelectItem", "", 1, 2500, false)]
        public bool EditorCameraBookmarksMenuOnSelectItem(coPopupMenu thisObj, int pos, string text)
        {
            coSimGroup CameraBookmarks = console.GetObjectID("CameraBookmarks");
            if (pos >= 0 && pos < CameraBookmarks.getCount())
            {
                coCameraBookmark mark = CameraBookmarks.getObject((uint)pos);
                coGuiContainer EditorGui = console.GetObjectID("EditorGui");
                EditorGui.call("jumpToBookmark", new string[] { mark.internalName });
                return true;
            }
            return false;
        }

        [Torque_Decorations.TorqueCallBack("", "EditorCameraBookmarksMenu", "rebuildBookmarks", "", 1, 2500, false)]
        public void EditorCameraBookmarksMenuRebuildBookmarks(coPopupMenu thisObj)
        {
            // Delete all current items
            while (thisObj.getItemCount() > 0)
                thisObj.removeItem("0");

            // Add back in all of the bookmarks
            coSimGroup CameraBookmarks = console.GetObjectID("CameraBookmarks");
            if (CameraBookmarks.isObject() && CameraBookmarks.getCount() > 0)
            {
                for (int i = 0; i < CameraBookmarks.getCount(); i++)
                {
                    coCameraBookmark mark = CameraBookmarks.getObject((uint)i);
                    EditorCameraBookmarksMenuAddItem(thisObj, i, "");
                }
                thisObj["NoneItem"] = "false";
            }
            else
            {
                EditorCameraBookmarksMenuAddItem(thisObj, 0, "None");
                thisObj.enableItem("0", "false");
                thisObj["NoneItem"] = "true";
            }
        }

        #endregion

        #region ManageBookmarksContainer

        [Torque_Decorations.TorqueCallBack("", "ManageBookmarksContainer", "onOK", "", 1, 2500, false)]
        public void ManageBookmarksContainerOnOK(coPopupMenu thisObj)
        {
            coGuiTextEditCtrl EAddBookmarkWindowName = console.GetObjectID("EAddBookmarkWindowName");
            coSimGroup CameraBookmarks = console.GetObjectID("CameraBookmarks");

            string name = EAddBookmarkWindowName.getText();
            EAddBookmarkWindowName.clearFirstResponder(false);

            if (name.Equals(""))
            {
                // look for a NewCamera to grab
                for (int i = 0; ; i++)
                {
                    name = "NewCamera_" + i;
                    if (CameraBookmarks.findObjectByInternalName(name, false) == "0")
                        break;
                }
            }

            // Check if the new bookmark name already exists
            if (CameraBookmarks.isObject() && CameraBookmarks.findObjectByInternalName(name, false) != "0")
            {
                string username = name;
                for (int i = 0; ; i++)
                {
                    name = username + "_" + i;
                    if (CameraBookmarks.findObjectByInternalName(name, false) == "0")
                        break;
                }
            }
            coGuiContainer EditorGui = console.GetObjectID("EditorGui");
            EditorGui.call("addCameraBookmark", new string[] { name });
            EAddBookmarkWindowName.text = "";
        }

        [Torque_Decorations.TorqueCallBack("", "EAddBookmarkWindowName", "onReturn", "", 1, 2500, false)]
        public void EAddBookmarkWindowNameOnReturn(coPopupMenu thisObj)
        {
            // Same as clicking the Create Bookmark button
            ManageBookmarksContainerOnOK(console.GetObjectID("ManageBookmarksContainer"));
        }

        #endregion

        #region ManageBookmarks

        [Torque_Decorations.TorqueCallBack("", "EManageBookmarks", "hideDialog", "", 1, 2500, false)]
        public void EManageBookmarksHideDialog(coGuiWindowCollapseCtrl thisObj)
        {
            thisObj.setVisible(false);
        }

        [Torque_Decorations.TorqueCallBack("", "EManageBookmarks", "ToggleVisibility", "", 1, 2500, false)]
        public void EManageBookmarksToggleVisibility(coGuiWindowCollapseCtrl thisObj)
        {
            coWorldEditor EWorldEditor = console.GetObjectID("EWorldEditor");
            if (thisObj.visible)
            {
                thisObj.setVisible(false);
                EWorldEditor["EManageBookmarksDisplayed"] = "false";
            }
            else
            {
                thisObj.setVisible(true);
                thisObj.selectWindow();
                thisObj.setCollapseGroup(false);
                EWorldEditor["EManageBookmarksDisplayed"] = "true";
            }
        }

        [Torque_Decorations.TorqueCallBack("", "EManageBookmarks", "addBookmark", "", 3, 2500, false)]
        public void EManageBookmarksAddBookmark(coGuiWindowCollapseCtrl thisObj, coCameraBookmark mark, int index)
        {
            coGuiControl gui;
            Torque_Class_Helper TCH = new Torque_Class_Helper("GuiControl");
            TCH.Props.Add("internalName", mark.getInternalName());
            TCH.Props.Add("Enabled", "1");
            TCH.Props.Add("Profile", "ToolsGuiDefaultProfile");
            TCH.Props.Add("HorizSizing", "right");
            TCH.Props.Add("VertSizing", "bottom");
            TCH.Props.Add("Position", "0 0");
            TCH.Props.Add("Extent", "300 20");
            TCH.Props.Add("MinExtent", "78 20");
            TCH.Props.Add("Visible", "1");
            TCH.Props.Add("Bookmark", mark);
            gui = TCH.Create();

            coGuiBitmapButtonCtrl but1;
            TCH = new Torque_Class_Helper("GuiBitmapButtonCtrl");
            TCH.Props.Add("class", "EManageBookmarksGoToButton");
            TCH.Props.Add("bitmap", "tools/gui/images/camera-btn");
            TCH.Props.Add("groupNum", "-1");
            TCH.Props.Add("buttonType", "PushButton");
            TCH.Props.Add("useMouseEvents", "0");
            TCH.Props.Add("isContainer", "0");
            TCH.Props.Add("Profile", "ToolsGuiButtonProfile");
            TCH.Props.Add("HorizSizing", "right");
            TCH.Props.Add("VertSizing", "bottom");
            TCH.Props.Add("position", "2 2");
            TCH.Props.Add("Extent", "17 17");
            TCH.Props.Add("MinExtent", "8 2");
            TCH.Props.Add("canSave", "1");
            TCH.Props.Add("Visible", "1");
            TCH.Props.Add("Command", "");
            TCH.Props.Add("tooltipprofile", "ToolsGuiToolTipProfile");
            TCH.Props.Add("ToolTip", "Go to bookmark");
            TCH.Props.Add("hovertime", "1000");
            TCH.Props.Add("internalName", "goToBookmark");
            TCH.Props.Add("canSaveDynamicFields", "0");
            but1 = TCH.Create();

            gui.add(but1);

            coGuiTextEditCtrl txt1;
            TCH = new Torque_Class_Helper("GuiTextEditCtrl");
            TCH.Props.Add("class", "EManageBookmarksTextEdit");
            TCH.Props.Add("internalName", "BookmarkName");
            TCH.Props.Add("profile", "ToolsGuiTextEditProfile");
            TCH.Props.Add("HorizSizing", "width");
            TCH.Props.Add("VertSizing", "bottom");
            TCH.Props.Add("position", "22 2");
            TCH.Props.Add("Extent", "260 18");
            TCH.Props.Add("text", mark.getInternalName());
            TCH.Props.Add("maxLength", "1024");
            TCH.Props.Add("AltCommand", "");
            txt1 = TCH.Create();

            gui.add(txt1);

            coGuiBitmapButtonCtrl but2;
            TCH = new Torque_Class_Helper("GuiBitmapButtonCtrl);
            TCH.Props.Add("class", "EManageBookmarksDeleteButton");
            TCH.Props.Add("bitmap", "tools/gui/images/delete");
            TCH.Props.Add("groupNum", "-1");
            TCH.Props.Add("buttonType", "PushButton");
            TCH.Props.Add("useMouseEvents", "0");
            TCH.Props.Add("isContainer", "0");
            TCH.Props.Add("Profile", "ToolsGuiButtonProfile");
            TCH.Props.Add("HorizSizing", "left");
            TCH.Props.Add("VertSizing", "bottom");
            TCH.Props.Add("position", "284 3");
            TCH.Props.Add("Extent", "16 16");
            TCH.Props.Add("MinExtent", "8 2");
            TCH.Props.Add("canSave", "1");
            TCH.Props.Add("Visible", "1");
            TCH.Props.Add("Command", "");
            TCH.Props.Add("tooltipprofile", "ToolsGuiToolTipProfile");
            TCH.Props.Add("ToolTip", "Delete camera bookmark");
            TCH.Props.Add("hovertime", "1000");
            TCH.Props.Add("internalName", "deleteBookmark");
            TCH.Props.Add("canSaveDynamicFields", "0");
            but2 = TCH.Create();

            gui.add(but2);

            coGuiWindowCollapseCtrl EManageBookmarks = console.GetObjectID("EManageBookmarks");
            coGuiStackControl ManageBookmarksWindowStack = EManageBookmarks.findObjectByInternalName("ManageBookmarksWindowStack", true);
            ManageBookmarksWindowStack.addGuiControl(gui);

        }

        [Torque_Decorations.TorqueCallBack("", "EManageBookmarks", "deleteBookmark", "", 3, 2500, false)]
        public void EManageBookmarksDeleteBookmark(coGuiWindowCollapseCtrl thisObj, coCameraBookmark mark, int index)
        {
            coGuiWindowCollapseCtrl EManageBookmarks = console.GetObjectID("EManageBookmarks");
            coGuiStackControl ManageBookmarksWindowStack = EManageBookmarks.findObjectByInternalName("ManageBookmarksWindowStack", true);
            coGuiControl gui = ManageBookmarksWindowStack.findObjectByInternalName(mark.getInternalName(), false);
            if(gui != 0)
                gui.delete();
            else
                console.warn("EManageBookmarks::deleteBookmark(): Could not find bookmark " + mark + " at index " + index);
        }

        [Torque_Decorations.TorqueCallBack("", "EManageBookmarksGoToButton", "onClick", "", 1, 2500, false)]
        public void EManageBookmarksGoToButtonOnClick(coGuiBitmapButtonCtrl thisObj)
        {
            coCameraBookmark mark = ((tsObject)thisObj.getParent())["Bookmark"];
            coGuiContainer EditorGui = console.GetObjectID("EditorGui");
            EditorGui.call("jumpToBookmark", new string[] { mark.getInternalName() } );
        }

        [Torque_Decorations.TorqueCallBack("", "EManageBookmarksDeleteButton", "onClick", "", 1, 2500, false)]
        public void EManageBookmarksDeleteButtonOnClick(coGuiBitmapButtonCtrl thisObj)
        {
            coCameraBookmark mark = ((tsObject)thisObj.getParent())["Bookmark"];
            coGuiContainer EditorGui = console.GetObjectID("EditorGui");
            EditorGui.schedule("0", "removeCameraBookmark", mark.getInternalName());
        }

        [Torque_Decorations.TorqueCallBack("", "EManageBookmarksTextEdit", "onGainFirstResponder", "", 1, 2500, false)]
        public void EManageBookmarksTextEditOnGainFirstResponder(coGuiTextEditCtrl thisObj)
        {
            if(thisObj.isActive())
                thisObj.selectAllText();
        }

        [Torque_Decorations.TorqueCallBack("", "EManageBookmarksTextEdit", "onReturn", "", 1, 2500, false)]
        public void EManageBookmarksTextEditOnReturn(coGuiTextEditCtrl thisObj)
        {
            EManageBookmarksTextEditOnValidate(thisObj);
        }

        [Torque_Decorations.TorqueCallBack("", "EManageBookmarksTextEdit", "onValidate", "", 1, 2500, false)]
        public void EManageBookmarksTextEditOnValidate(coGuiTextEditCtrl thisObj)
        {
            coCameraBookmark mark = ((tsObject)thisObj.getParent())["Bookmark"];
            string oldName = mark.getInternalName();
            string newName = thisObj.getText();
            
            // If the new name is the same as the old, do nothing
            if(oldName.Equals(newName))
                return;
            
            // Make sure the new name doesn't conflict with a current bookmark
            coSimGroup CameraBookmarks = console.GetObjectID("CameraBookmarks");
            if(CameraBookmarks.isObject() && CameraBookmarks.findObjectByInternalName(newName, false) != "0")
            {
                int id = thisObj.getId();
                string callback = id + ".setText(\"" + oldName + "\"); " + id + ".makeFirstResponder(true); " + id + ".selectAllText();";
                console.Call("MessageBoxOK", new string[] { "Create Bookmark", "You must provide a unique name for the new bookmark.", callback });
                return;
            }
            
            // Rename the bookmark and update
            ((coSimObject)thisObj.getParent()).setInternalName(newName);
            mark.setInternalName(newName);
            coGuiInspector Inspector = console.GetObjectID("Inspector");
            if(Inspector.getInspectObject().Equals(mark.getId().AsString()))
            {
                Inspector.inspect(mark);
                Inspector.apply();
            }
            else
            {
                // User is not inspecting the bookmark, so manually
                // update the menu.
                mark.call("onInspectPostApply");
            }

        }


        #endregion
    }
}
