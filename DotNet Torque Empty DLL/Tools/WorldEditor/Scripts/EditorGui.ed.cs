// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// 
// 

#region

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Threading;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using WinterLeaf.tsObjects;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Tools
{
    public partial class Main : TorqueScriptTemplate
    {
        [Torque_Decorations.TorqueCallBack("", "EditorGui", "init", "", 1, 2500, false)]
        public void EditorGuiInit(coGuiContainer thisObj)
        {
            coWorldEditor EWorldEditor = console.GetObjectID("EWorldEditor");
            coWorldEditor ETerrainEditor = console.GetObjectID("ETerrainEditor");

            EWorldEditor.isDirty = false;
            ETerrainEditor.isDirty = false;
            ETerrainEditor["isMissionDirty"] = false.ToString();

            if (thisObj["isInitialized"].AsBool())
                return;

            thisObj.call("readWorldEditorSettings");

            iGlobal["$SelectedOperation"] = -1;
            iGlobal["$NextOperationId"] = 1;
            iGlobal["$HeightfieldDirtyRow"] = -1;

            thisObj.call("buildMenus");

            coGuiWindowCtrl EWToolsPaletteWindow = console.GetObjectID("EWToolsPaletteWindow");
            if (!console.isObject(thisObj.findObjectByInternalName("ToolsPaletteWindow", true)))
            {
                Util.exec("~/worldEditor/gui/ToolsPaletteWindow.ed.gui", false, false);
                if (EWToolsPaletteWindow.isObject())
                {
                    thisObj.add(EWToolsPaletteWindow);
                    EWToolsPaletteWindow.call("init");
                    EWToolsPaletteWindow.setVisible(false);
                }
            }

            coGuiWindowCollapseCtrl EWTreeWindow = console.GetObjectID("EWTreeWindow");
            coGuiTreeViewCtrl EditorTree = EWTreeWindow.findObjectByInternalName("EditorTree", true);
            if (!console.isObject(thisObj.findObjectByInternalName("TreeWindow", true)))
            {
                Util.exec("~/worldEditor/gui/WorldEditorTreeWindow.ed.gui", false, false);
                if (EWTreeWindow.isObject())
                {
                    thisObj.add(EWTreeWindow);
                    EditorTree.call("selectPage", new string[] { "0" });
                    EWTreeWindow.setVisible(false);
                }
            }

            coGuiWindowCollapseCtrl EWInspectorWindow = console.GetObjectID("EWInspectorWindow");
            if (!console.isObject(thisObj.findObjectByInternalName("InspectorWindow", true)))
            {
                Util.exec("~/worldEditor/gui/WorldEditorInspectorWindow.ed.gui", false, false);
                if (!EWInspectorWindow.isObject())
                {
                    thisObj.add(EWInspectorWindow);
                    EWInspectorWindow.setVisible(false);
                }
            }

            coGuiControl EWorldEditorToolbar = console.GetObjectID("EWorldEditorToolbar");
            if (!console.isObject(thisObj.findObjectByInternalName("WorldEditorToolbar", true)))
            {
                Util.exec("~/worldEditor/gui/WorldEditorToolbar.ed.gui", false, false);
                if (EWorldEditorToolbar.isObject())
                {
                    thisObj.add(EWorldEditorToolbar);
                    EWorldEditorToolbar.setVisible(false);
                }
            }

            coGuiControl EWTerrainEditToolbar = console.GetObjectID("EWTerrainEditToolbar");
            if (!console.isObject(thisObj.findObjectByInternalName("TerrainEditToolbar", true)))
            {
                Util.exec("~/worldEditor/gui/TerrainEditToolbar.ed.gui", false, false);
                if (EWTerrainEditToolbar.isObject())
                {
                    thisObj.add(EWTerrainEditToolbar);
                    EWTerrainEditToolbar.setVisible(false);
                }
            }

            if (!console.isObject(thisObj.findObjectByInternalName("TerrainPainter", true)))
            {
                Util.exec("~/worldEditor/gui/TerrainPainterWindow.ed.gui", false, false);
                coGuiControl guiContent = console.GetObjectID("%guiContent");
                if (guiContent.isObject())
                {
                    thisObj.add(guiContent.findObjectByInternalName("TerrainPainter", false));
                    thisObj.add(guiContent.findObjectByInternalName("TerrainPainterPreview", false));
                }
                Util.exec("~/worldEditor/gui/guiTerrainMaterialDlg.ed.gui", false, false);
                Util.exec("~/worldEditor/gui/TerrainBrushSoftnessCurveDlg.ed.gui", false, false);
            }

            if (!console.isObject(thisObj.findObjectByInternalName("TerrainPainterToolbar", true)))
            {
                Util.exec("~/worldEditor/gui/TerrainPainterToolbar.ed.gui", false, false);
                coGuiControl EWTerrainPainterToolbar = console.GetObjectID("EWTerrainPainterToolbar");
                if (EWTerrainPainterToolbar.isObject())
                {
                    thisObj.add(EWTerrainPainterToolbar);
                    EWTerrainPainterToolbar.setVisible(false);
                }
            }

            if (!console.isObject(thisObj.findObjectByInternalName("ToolsToolbar", true)))
            {
                Util.exec("~/worldEditor/gui/ToolsToolbar.ed.gui", false, false);
                coGuiContainer EWToolsToolbar = console.GetObjectID("EWToolsToolbar");
                EWToolsToolbar.setVisible(true);
            }

            if (!console.isObject(thisObj.findObjectByInternalName("VisibilityLayerWindow", true)))
            {
                coGuiWindowCtrl EVisibility = console.GetObjectID("EVisibility");
                coGuiTabBookCtrl EVisibilityTabBook = console.GetObjectID("EVisibilityTabBook");
                thisObj.add(EVisibility);
                EVisibility.setVisible(false);
                EVisibilityTabBook.selectPage(0);
            }

            if (!console.isObject(thisObj.findObjectByInternalName("EditorSettingsWindow", true)))
            {
                Util.exec("~/worldEditor/gui/EditorSettingsWindow.ed.gui", false, false);
                coGuiWindowCollapseCtrl ESettingsWindow = console.GetObjectID("ESettingsWindow");
                thisObj.add(ESettingsWindow);
                ESettingsWindow.setVisible(false);

                Util.exec("~/worldEditor/gui/GeneralSettingsTab.ed.gui", false, false);
                ESettingsWindow.call("addTabPage", console.GetObjectID("EGeneralSettingsPage").AsString());
                Util.exec("~/worldEditor/gui/ObjectEditorSettingsTab.ed.gui", false, false);
                ESettingsWindow.call("addTabPage", console.GetObjectID("EObjectEditorSettingsPage").AsString());
                Util.exec("~/worldEditor/gui/AxisGizmoSettingsTab.ed.gui", false, false);
                ESettingsWindow.call("addTabPage", console.GetObjectID("EAxisGizmoSettingsPage").AsString());
                Util.exec("~/worldEditor/gui/TerrainEditorSettingsTab.ed.gui", false, false);
                ESettingsWindow.call("addTabPage", console.GetObjectID("ETerrainEditorSettingsPage").AsString());
                Util.exec("~/worldEditor/gui/CameraSettingsTab.ed.gui", false, false);
                ESettingsWindow.call("addTabPage", console.GetObjectID("ECameraSettingsPage").AsString());
            }

            if (!console.isObject(thisObj.findObjectByInternalName("SnapOptionsWindow", true)))
            {
                  Util.exec("~/worldEditor/gui/ObjectSnapOptionsWindow.ed.gui", false, false);
                  coGuiWindowCollapseCtrl ESnapOptions = console.GetObjectID("ESnapOptions");
                  coGuiTabBookCtrl ESnapOptionsTabBook = console.GetObjectID("ESnapOptionsTabBook");
                  thisObj.add( ESnapOptions );
                  ESnapOptions.setVisible(false);
                  ESnapOptionsTabBook.selectPage(0);
            }

            if (!console.isObject(thisObj.findObjectByInternalName("TransformSelectionWindow", true)))
            {
                Util.exec("~/worldEditor/gui/TransformSelectionWindow.ed.gui", false, false);
                Util.exec("~/worldEditor/scripts/transformSelection.ed.cs", false, false);
                coGuiWindowCollapseCtrl ETransformSelection = console.GetObjectID("ETransformSelection");
                thisObj.add( ETransformSelection );
                ETransformSelection.setVisible(false);
            }

            if (!console.isObject(thisObj.findObjectByInternalName("ManageBookmarksWindow", true)))
            {
                coGuiControl EManageBookmarks = console.GetObjectID("EManageBookmarks");
                thisObj.add(EManageBookmarks);
                EManageBookmarks.setVisible(false);
            }

            if (!console.isObject(thisObj.findObjectByInternalName("ManageSFXParametersWindow", true)))
            {
                coGuiControl EManageSFXParameters = console.GetObjectID("EManageSFXParameters");
                thisObj.add(EManageSFXParameters);
                EManageSFXParameters.setVisible(false);
            }

            if (!console.isObject(thisObj.findObjectByInternalName("SelectObjectsWindow", true)))
            {
                coGuiControl ESelectObjectsWindow = console.GetObjectID("ESelectObjectsWindow");
                thisObj.add(ESelectObjectsWindow);
                ESelectObjectsWindow.setVisible(false);
            }


            coGuiWindowCtrl EWCreatorWindow = console.GetObjectID("EWCreatorWindow");
            coGuiControl ObjectBuilderGui = console.GetObjectID("ObjectBuilderGui");
            coGuiBitmapButtonCtrl EWorldEditorToggleCamera = console.GetObjectID("EWorldEditorToggleCamera");
            coGuiPopUpMenuCtrl EWorldEditorAlignPopup = console.GetObjectID("EWorldEditorAlignPopup");


            EWorldEditor.call("init");
            ETerrainEditor.call("init");

            EWCreatorWindow.call("init");
            ObjectBuilderGui.call("init");

            thisObj.call("setMenuDefaultState");

            EWorldEditorToggleCamera.setBitmap("tools/worldEditor/images/toolbar/player");

            EWorldEditorAlignPopup.clear();
            EWorldEditorAlignPopup.add("World", "0");
            EWorldEditorAlignPopup.add("Object", "1");
            EWorldEditorAlignPopup.setSelected("0");

            // Sync camera gui
            thisObj.call("syncCameraGui");
            
            // this will brind CameraTypesDropdown to front so that it goes over the menubar
            thisObj.pushToBack(console.GetObjectID("CameraTypesDropdown").AsString());
            thisObj.pushToBack(console.GetObjectID("VisibilityDropdown").AsString());

            // dropdowns out so that they display correctly in editor gui
            ((coGuiContainer)console.GetObjectID("objectTransformDropdown")).parentGroup = "editorGui";
            ((coGuiContainer)console.GetObjectID("objectCenterDropdown")).parentGroup = "editorGui";
            ((coGuiContainer)console.GetObjectID("objectSnapDropdown")).parentGroup = "editorGui"; 

            // make sure to show the default world editor guis
            thisObj.bringToFront( EWorldEditor );
            EWorldEditor.setVisible( false );       
   
            coSimSet EditorPluginSet = console.GetObjectID("EditorPluginSet");

            // Call the startup callback on the editor plugins.   
            for ( uint i = 0; i < EditorPluginSet.getCount(); i++ )
            {
                coSimObject obj = EditorPluginSet.getObject( i );
                obj.call("onWorldEditorStartup");     
            }

            // With everything loaded, start up the settings window
            ((coGuiWindowCollapseCtrl)console.GetObjectID("ESettingsWindow")).call("startup");
   
            // Start up initial editor plugin.
   
            coScriptObject initialEditor = thisObj["currentEditor"]; // Read from prefs.
            thisObj["currentEditor"] = "";

            if( initialEditor.Equals("") )
                initialEditor = "WorldEditorInspectorPlugin";
            thisObj.call("setEditor", new string[] { initialEditor, "true", "true" } );
   
            // Done.
            thisObj["isInitialized"] = true.AsString();
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "setupDefaultCameraSettings", "", 1, 2500, false)]
        public void EditorGuiSetupDefaultCameraSettings(coGuiContainer thisObj)
        {
            coSettings EditorSettings = console.GetObjectID("EditorSettings");

            EditorSettings.beginGroup("LevelInformation/levels/" + thisObj["levelName"]);

            EditorSettings.setDefaultValue("cameraSpeedMin", "5");
            EditorSettings.setDefaultValue("cameraSpeedMax", "200");

            EditorSettings.endGroup();
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "readCameraSettings", "", 2, 2500, false)]
        public void EditorGuiReadCameraSettings(coGuiContainer thisObj, string levelName)
        {
            if (levelName != thisObj["levelName"])
                return;

            ((coPopupMenu)console.GetObjectID("EditorCameraSpeedOptions")).call("setupGuiControls");
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "writeCameraSettings", "", 1, 2500, false)]
        public void EditorGuiWriteCameraSettings(coGuiContainer thisObj)
        {
            coSettings EditorSettings = console.GetObjectID("EditorSettings");

            EditorSettings.beginGroup("LevelInformation/levels/" + thisObj["levelName"]);

            EditorSettings.setValue("cameraSpeed", sGlobal["$Camera::movementSpeed"]);

            EditorSettings.endGroup();
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "shutdown", "", 1, 2500, false)]
        public void EditorGuiWriteShutdown(coGuiContainer thisObj)
        {
            // Store settings.
            thisObj.call("writeWorldEditorSettings");

            // Deactivate current editor.

            thisObj.call("setEditor", new string[] { " " });

            // Call the shutdown callback on the editor plugins.
            coSimSet EditorPluginSet = console.GetObjectID("EditorPluginSet");
            EditorPluginSet.callOnChildren("onWorldEditorShutdown");
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "addToEditorsMenu", "", 4, 2500, false)]
        public string EditorGuiAddToEditorsMenu(coGuiContainer thisObj, string displayName, string accel, string newPlugin)
        {
            coPopupMenu windowMenu = (coPopupMenu)thisObj.call("findMenu", new string[] { "Editors" });
            int count = windowMenu.getItemCount();
            bool alreadyExists = false;
            for (int i = 0; i < count; i++)
            {
                string existingPlugins = Util.getField(windowMenu["Item[" + i + "]"], 2);

                if (newPlugin.Equals(existingPlugins))
                    alreadyExists = true;
            }

            if (accel.Equals("") && count < 9)
                accel = "F" + count++;
            else
                accel = "";

            if (!alreadyExists)
                windowMenu.call("addItem", count.AsString(), displayName + "\t" + accel + "\t" + newPlugin);

            return accel;
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "addToToolsToolbar", "", 5, 2500, false)]
        public void EditorGuiAddToToolsToolbar(coGuiContainer thisObj, string pluginName, string internalName, string bitmap, string tooltip)
        {
            coGuiDynamicCtrlArrayControl ToolsToolbarArray = console.GetObjectID("ToolsToolbarArray");

            int count = ToolsToolbarArray.getCount();

            bool alreadyExists = false;
            for (int i = 0; i < count; i++)
            {
                string existingInternalName = ((coSimObject)ToolsToolbarArray.getObject((uint)i)).getFieldValue("internalName", 0);

                if (internalName.Equals(existingInternalName))
                {
                    alreadyExists = true;
                    break;
                }
            }

            if (!alreadyExists)
            {
                coGuiBitmapButtonCtrl button = console.Eval(@"new GuiBitmapButtonCtrl() {
                                                    canSaveDynamicFields = ""0"";
                                                    internalName = " + internalName + @";
                                                    Enabled = ""1"";
                                                    isContainer = ""0"";
                                                    Profile = ""ToolsGuiButtonProfile"";
                                                    HorizSizing = ""right"";
                                                    VertSizing = ""bottom"";
                                                    position = ""180 0"";
                                                    Extent = ""25 19"";
                                                    MinExtent = ""8 2"";
                                                    canSave = ""1"";
                                                    Visible = ""1"";
                                                    Command = ""EditorGui.setEditor(" + pluginName + @");"";
                                                    tooltipprofile = ""ToolsGuiToolTipProfile"";
                                                    ToolTip = " + tooltip + @";
                                                    hovertime = ""750"";
                                                    bitmap = " + bitmap + @";
                                                    buttonType = ""RadioButton"";
                                                    groupNum = ""0"";
                                                    useMouseEvents = ""0"";
                                                };"
                                                , true);
                ToolsToolbarArray.add(button);
            }
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "setDisplayType", "", 2, 2500, false)]
        public void EditorGuiSetDisplayType(coGuiContainer thisObj, string type)
        {
            coGuiControl gui = thisObj["currentEditor.editorGui"];
            coGameConnection LocalClientConnection = console.GetObjectID("LocalClientConnection");
            if (!gui.isObject())
                return;
            ((coPopupMenu)thisObj["viewTypeMenu"]).checkRadioItem("0", "7", type);
            // Store the current camera rotation so we can restore it correctly when
            // switching back to perspective view
            if (gui.call("getDisplayType").Equals(sGlobal["$EditTSCtrl::DisplayTypePerspective"]))
                thisObj["lastPerspectiveCamRotation"] = ((coCamera)LocalClientConnection["camera"]).getRotation().AsString();

            gui.call("setDisplayType", type);

            if (gui.call("getDisplayType").Equals(sGlobal["$EditTSCtrl::DisplayTypePerspective"]))
                ((coCamera)LocalClientConnection["camera"]).setRotation(thisObj["lastPerspectiveCamRotation"].AsPoint3F());

            thisObj["currentDisplayType"] = type;
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "setEditor", "", 3, 2500, false)]
        public void EditorGuiSetEditor(coSimObject thisObj, coSimObject newEditor, bool dontActivate)
        {
            if (console.isObject(thisObj["currentEditor"]))
            {
                if (console.isObject(newEditor) && ((coSimObject)thisObj["currentEditor"]).getId() == newEditor.getId())
                    return;

                if (((coSimObject)thisObj["currentEditor"]).call("isActivated").AsBool())
                    ((coSimObject)thisObj["currentEditor"]).call("onDeactivated");

                if (console.isObject(thisObj["currentEditor.editorGui"]))
                    thisObj["currentOrthoFOV"] = ((coSimObject)thisObj["currentEditor.editorGui"]).call("getOrthoFOV");
            }

            if (!console.isObject(newEditor))
            {
                thisObj["currentEditor"] = "";
                return;
            }

            // If we have a special set editor function, run that instead
            if (newEditor.isMethod("setEditorFunction"))
            {
                if (newEditor.call("setEditorFunction").AsBool())
                {
                    thisObj.call("syncEditor", newEditor);
                    thisObj["currentEditor"] = newEditor;

                    if (!dontActivate)
                        ((coSimObject)thisObj["currentEditor"]).call("onActivated");
                }
                else
                {
                    // if were falling back and were the same editor, why are we going to just shove ourself
                    // into the editor position again? opt for a fallback
                    if (!console.isObject(thisObj["currentEditor"]))
                        thisObj["currentEditor"] = "WorldEditorInspectorPlugin";
                    else if (((coSimObject)thisObj["currentEditor"]).getId() == newEditor.getId())
                        thisObj["currentEditor"] = "WorldEditorInspectorPlugin";

                    thisObj.call("syncEditor", thisObj["currentEditor"], "true");

                    if (!dontActivate)
                        ((coSimObject)thisObj["currentEditor"]).call("onActivated");
                }
            }
            else
            {
                thisObj.call("syncEditor", newEditor);
                thisObj["currentEditor"] = newEditor;

                if (!dontActivate)
                    ((coSimObject)thisObj["currentEditor"]).call("onActivated");
            }

            // Sync display type.

            coGuiContainer gui = thisObj["currentEditor.editorGui"];
            if (console.isObject(gui))
            {
                EditorGuiSetDisplayType(gui, thisObj["currentDisplayType"]);
                gui.call("setOrthoFOV", thisObj["currentOrthFOV"]);
                coGuiContainer EditorGui = console.GetObjectID("EditorGui");
                EditorGui.call("syncCameraGui");
            }
        }
        [Torque_Decorations.TorqueCallBack("", "EditorGui", "syncEditor", "", 3, 2500, false)]
        public void EditorGuiSyncEditor(coGuiContainer thisObj, string newEditor, bool newEditorFailed)
        {
            // Sync with menu bar
            coPopupMenu menu = thisObj.call("findMenu", "Editors");
            int count = menu.getItemCount();
            for (int i = 0; i < count; i++)
            {
                string pluginObj = Util.getField(menu["item[" + i + "]"], 2);
                if (pluginObj.Equals(newEditor))
                {
                    menu.call("checkRadioItem", "0", count.AsString(), i.AsString());
                    break;
                }
            }

            // In order to hook up a palette, the word Palette must be able to be
            // switched out in order to read correctly, if not, no palette will be used
            string paletteName = newEditor.Replace("Plugin", "Palette");


            coGuiDynamicCtrlArrayControl ToolsToolbarArray = console.GetObjectID("ToolsToolbarArray");
            // Sync with ToolsToolbar
            for (int i = 0; i < ToolsToolbarArray.getCount(); i++)
            {
                string toolbarButton = ((coSimObject)ToolsToolbarArray.getObject((uint)i))["internalName"];
                if (paletteName.Equals(toolbarButton))
                {
                    ((coSimObject)ToolsToolbarArray.getObject((uint)i)).call("setStateOn", "1");
                    break;
                }
            }

            coGuiContainer EWToolsToolbar = console.GetObjectID("EWToolsToolbar");

            // Handles quit game and gui editor changes in wierd scenarios
            if (newEditorFailed && EWToolsToolbar["isDynamic"].AsBool())
            {
                if (EWToolsToolbar["isClosed"].AsBool())
                    EWToolsToolbar.call("reset");
                EWToolsToolbar.call("toggleSize");
            }

            // Toggle the editor specific palette; we define special cases here
            switch (paletteName)
            {
                case "MaterialEditorPalette":
                    paletteName = "WorldEditorInspectorPalette";
                    break;
                case "DatablockEditorPalette":
                    paletteName = "WorldEditorInspectorPalette";
                    break;
                case "ParticleEditorPalette":
                    paletteName = "WorldEditorInspectorPalette";
                    break;
            }
            ((coSimObject)thisObj.findObjectByInternalName("ToolsPaletteWindow", true)).call("togglePalette", paletteName);
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "onWake", "", 1, 2500, false)]
        public void EditorGuiOnWake(coSimObject thisObj)
        {
            ((coSimObject)console.GetObjectID("EHWorldEditor")).call("setStateOn", "1");

            // Notify the editor plugins that the editor has started.

            coSimSet EditorPluginSet = console.GetObjectID("EditorPluginSet");
            EditorPluginSet.callOnChildren("onEditorWake");

            // Push the ActionMaps in the order that we want to have them
            // before activating an editor plugin, so that if the plugin
            // installs an ActionMap, it will be highest on the stack.

            coActionMap MoveMap = console.GetObjectID("MoveMap");
            coActionMap EditorMap = console.GetObjectID("EditorMap");

            MoveMap.push();
            EditorMap.push();

            // Active the current editor plugin.

            if (!thisObj["currentEditor.isActivated"].AsBool())
                ((coSimObject)thisObj["currentEditor"]).call("onActivated");

            int slashPos = 0;
            while (Util.strpos(sGlobal["$Server::MissionFile"], "/", slashPos) != -1)
            {
                slashPos = Util.strpos(sGlobal["$Server::MissionFile"], "/", slashPos) + 1;
            }
            string levelName = sGlobal["$Server::MissionFile"].Substring(slashPos, 99);

            if (!levelName.Equals(thisObj["levelName"]))
                thisObj.call("onNewLevelLoaded", levelName);
            coSimObject DemoEditorAlert = console.GetObjectID("DemoEditorAlert");
            coGuiCanvas Canvas = console.GetObjectID("Canvas");
            if (console.isObject(DemoEditorAlert) && DemoEditorAlert["helpTag"].AsInt() < 2)
                Canvas.pushDialog(DemoEditorAlert);
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "onSleep", "", 1, 2500, false)]
        public void EditorGuiOnSleep(coSimObject thisObj)
        {
            // Deactivate the current editor plugin.

            if (thisObj["currentEditor.isActivated"].AsBool())
                ((coSimObject)thisObj["currentEditor"]).call("onDeactivated");

            // Remove the editor's ActionMaps.
            coActionMap MoveMap = console.GetObjectID("MoveMap");
            coActionMap EditorMap = console.GetObjectID("EditorMap");

            EditorMap.pop();
            MoveMap.pop();

            // Notify the editor plugins that the editor will be closing.

            coSimSet EditorPluginSet = console.GetObjectID("EditorPluginSet");
            EditorPluginSet.callOnChildren("onEditorSleep");

            if (console.isObject(sGlobal["$Server::CurrentScene"]))
                ((coSimObject)sGlobal["$Server::CurrentScene"]).call("open");
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "onNewLevelLoaded", "", 2, 2500, false)]
        public void EditorGuiOnNewLevelLoaded(coSimObject thisObj, string levelName)
        {
            thisObj["levelName"] = levelName;
            thisObj.call("setupDefaultCameraSettings");
            coGuiTabPageCtrl ECameraSettingsPage = console.GetObjectID("ECameraSettingsPage");
            ECameraSettingsPage.call("init");
            coPopupMenu EditorCameraSpeedOptions = console.GetObjectID("EditorCameraSpeedOptions");
            EditorCameraSpeedOptions.call("setupDefaultState");

            coScriptObject obj = new Torque_Class_Helper("ScriptObject", "EditorMissionCleanup").Create();
            obj.parentGroup = "MissionCleanup";
        }

        [Torque_Decorations.TorqueCallBack("", "EditorMissionCleanup", "onRemove", "", 1, 2500, false)]
        public void EditorMissionCleanupOnRemove(coSimObject thisObj)
        {
            coGuiContainer EditorGui = console.GetObjectID("EditorGui");
            EditorGui["levelName"] = "";

            coSimSet EditorPluginSet = console.GetObjectID("EditorPluginSet");
            EditorPluginSet.callOnChildren("onExitMission");
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "onSetContent", "", 2, 2500, false)]
        public void EditorGuiOnSetContent(coSimObject thisObj, string oldContent)
        {
            thisObj.call("attachMenus");
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "onUnsetContent", "", 2, 2500, false)]
        public void EditorGuiOnUnsetContent(coSimObject thisObj, string newContent)
        {
            thisObj.call("detachMenus");
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "toggleSFXParametersWindow", "", 1, 2500, false)]
        public void EditorGuiToggleSFXParametersWindow(coGuiContainer thisObj)
        {
            coGuiControl window = thisObj.findObjectByInternalName("ManageSFXParametersWindow", true);
            window.setVisible(!window.isVisible());
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "addCameraBookmark", "", 2, 2500, false)]
        public void EditorGuiAddCameraBookmark(coSimObject thisObj, string name)
        {
            coCameraBookmark obj = new Torque_Class_Helper("CameraBookmark").Create();
            obj.dataBlock = "CameraBookmarkMarker";
            obj.internalName = name;


            coSimGroup CameraBookmarks = console.GetObjectID("CameraBookmarks");
            // Place into correct group
            if (!console.isObject(CameraBookmarks))
            {
                coSimGroup grp = new Torque_Class_Helper("SimGroup", "CameraBookmarks").Create();
                coSimGroup MissionGroup = console.GetObjectID("MissionGroup");
                MissionGroup.add(grp);
            }
            CameraBookmarks.add(obj);

            TransformF cam = ((coCamera)((coGameConnection)console.GetObjectID("LocalClientConnection"))["camera"]).getTransform();
            obj.setTransform(cam);

            ((coWorldEditor)console.GetObjectID("EWorldEditor")).isDirty = true;
            ((coSimObject)console.GetObjectID("EditorTree")).call("buildVisibleTree", "true");
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "removeCameraBookmark", "", 2, 2500, false)]
        public void EditorGuiRemoveCameraBookmark(coSimObject thisObj, string name)
        {
            coSimGroup CameraBookmarks = console.GetObjectID("CameraBookmarks");
            if (!console.isObject(CameraBookmarks))
                return;

            coSimObject mark = CameraBookmarks.findObjectByInternalName(name, true);
            if (mark == 0)
                return;

            console.Eval("MEDeleteUndoAction::submit( " + mark + " );");
            ((coWorldEditor)console.GetObjectID("EWorldEditor")).isDirty = true;
            ((coSimObject)console.GetObjectID("EditorTree")).call("buildVisibleTree", "true");
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "removeCameraBookmarkIndex", "", 2, 2500, false)]
        public void EditorGuiRemoveCameraBookmarkIndex(coSimObject thisObj, int index)
        {
            coSimGroup CameraBookmarks = console.GetObjectID("CameraBookmarks");
            if (!console.isObject(CameraBookmarks))
                return;

            if (index < 0 || index >= CameraBookmarks.getCount())
                return;

            coCameraBookmark obj = CameraBookmarks.getObject((uint)index);
            console.Eval("MEDeleteUndoAction::submit( " + obj + " );");
            ((coWorldEditor)console.GetObjectID("EWorldEditor")).isDirty = true;
            ((coSimObject)console.GetObjectID("EditorTree")).call("buildVisibleTree", "true");
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "jumpToBookmark", "", 2, 2500, false)]
        public void EditorGuiJumpToBookmark(coSimObject thisObj, string name)
        {
            coSimGroup CameraBookmarks = console.GetObjectID("CameraBookmarks");
            if (!console.isObject(CameraBookmarks))
                return;

            coCameraBookmark mark = CameraBookmarks.findObjectByInternalName(name, true);
            if (mark == 0)
                return;

            ((coCamera)((coGameConnection)console.GetObjectID("LocalClientConnection"))["camera"]).setTransform(mark.getTransform());
            return;
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "jumpToBookmarkIndex", "", 2, 2500, false)]
        public void EditorGuiJumpToBookmarkIndex(coSimObject thisObj, int index)
        {
            coSimGroup CameraBookmarks = console.GetObjectID("CameraBookmarks");
            if (!console.isObject(CameraBookmarks))
                return;

            if (index < 0 || index >= CameraBookmarks.getCount())
                return;

            TransformF trans = ((coCameraBookmark)CameraBookmarks.getObject((uint)index)).getTransform();
            ((coCamera)((coGameConnection)console.GetObjectID("LocalClientConnection"))["camera"]).setTransform(trans);
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "addCameraBookmarkByGui", "", 1, 2500, false)]
        public void EditorGuiAddCameraBookmarkByGui(coSimObject thisObj)
        {
            // look for a NewCamera name to grab
            string name;
            for (int i = 0; ; i++)
            {
                name = "NewCamera_" + i;
                coSimGroup CameraBookmarks = console.GetObjectID("CameraBookmarks");
                if (!CameraBookmarks.findObjectByInternalName(name, false).Equals(""))
                {
                    break;
                }
            }
            EditorGuiAddCameraBookmark(console.GetObjectID("EditorGui"), name);
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "toggleCameraBookmarkWindow", "", 1, 2500, false)]
        public void EditorGuiToggleCameraBookmarkWindow(coSimObject thisObj)
        {
            ((coSimObject)console.GetObjectID("EManageBookmarks")).call("ToggleVisibility");
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "toggleObjectSelectionsWindow", "", 1, 2500, false)]
        public void EditorGuiToggleObjectSelectionsWindow(coSimObject thisObj)
        {
            ((coSimObject)console.GetObjectID("ESelectObjectsWindow")).call("ToggleVisibility");
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "toggleOrthoGrid", "", 1, 2500, false)]
        public void EditorGuiToggleOrthoGrid(coSimObject thisObj)
        {
            coSimObject EWorldEditor = console.GetObjectID("EWorldEditor");
            EWorldEditor["renderOrthoGrid"] = (!EWorldEditor["renderOrthoGrid"].AsBool()).AsString();
        }

        [Torque_Decorations.TorqueCallBack("", "EditorGui", "syncCameraGui", "", 1, 2500, false)]
        public void EditorGuiSyncCameraGui(coSimObject thisObj)
        {
            if (!console.Call("EditorIsActive").AsBool())
                return;

            // Sync projection type
            string displayType = ((coSimObject)thisObj["currentEditor.editorGui"]).call("getDisplayType");
            ((coSimObject)thisObj["viewTypeMenu"]).call("checkRadioItem", "0", "7", displayType);

            coGameConnection LocalClientConnection = console.GetObjectID("LocalClientConnection");
            coCamera _Camera = LocalClientConnection["camera"];

            // Set the camera object's mode and rotation so that it moves correctly
            // based on the current editor mode
            if (!displayType.Equals(sGlobal["$EditTSCtrl::DisplayTypePerspective"]))
            {
                string name = "";
                string camRot = "";
                if (displayType.Equals(sGlobal["$EditTSCtrl::DisplayTypeTop"]))
                {
                    name = "Top View";
                    camRot = "0 0 0";
                }
                if (displayType.Equals(sGlobal["$EditTSCtrl::DisplayTypeBottom"]))
                {
                    name = "Bottom View";
                    camRot = "3.14159 0 0";
                }
                if (displayType.Equals(sGlobal["$EditTSCtrl::DisplayTypeLeft"]))
                {
                    name = "Left View";
                    camRot = "-1.571 0 1.571";
                }
                if (displayType.Equals(sGlobal["$EditTSCtrl::DisplayTypeRight"]))
                {
                    name = "Right View";
                    camRot = "-1.571 0 -1.571";
                }
                if (displayType.Equals(sGlobal["$EditTSCtrl::DisplayTypeFront"]))
                {
                    name = "Front View";
                    camRot = "-1.571 0 3.14159";
                }
                if (displayType.Equals(sGlobal["$EditTSCtrl::DisplayTypeBack"]))
                {
                    name = "Back View";
                    camRot = "-1.571 0 0";
                }
                if (displayType.Equals(sGlobal["$EditTSCtrl::DisplayTypeIsometric"]))
                {
                    name = "Isometric View";
                    camRot = "0 0 0";
                }

                _Camera.controlMode = Camera__CameraMotionMode.FlyMode;
                _Camera.setRotation(new Point3F(camRot));
                ((coSimObject)console.GetObjectID("EditorGuiStatusBar")).call("setCamera", name);
                return;
            }

            // Sync camera settings.
            int flyModeRadioItem = -1;
            coGuiContainer EditorGui = console.GetObjectID("EditorGui");
            coGuiBitmapButtonCtrl EWorldEditorToggleCamera = console.GetObjectID("EWorldEditorToggleCamera");
            coGuiContainer EditorGuiStatusBar = console.GetObjectID("EditorGuiStatusBar");
            coPopupMenu EditorFreeCameraTypeOptions = console.GetObjectID("EditorFreeCameraTypeOptions");
            coPopupMenu EditorPlayerCameraTypeOptions = console.GetObjectID("EditorPlayerCameraTypeOptions");
            if (LocalClientConnection.getControlObject() != LocalClientConnection["player"])
            {
                Camera__CameraMotionMode mode = _Camera.getMode();

                if (mode == Camera__CameraMotionMode.FlyMode && _Camera.newtonMode)
                {
                    if (_Camera.newtonRotation == true)
                    {
                        ((coGuiIconButtonCtrl)EditorGui.findObjectByInternalName("NewtonianRotationCamera", true)).setStateOn(true);
                        EWorldEditorToggleCamera.setBitmap("tools/gui/images/menubar/smooth-cam-rot");
                        flyModeRadioItem = 4;
                        EditorGuiStatusBar.call("setCamera", "Smooth Rot Camera");
                    }
                    else
                    {
                        ((coGuiIconButtonCtrl)EditorGui.findObjectByInternalName("NewtonianCamera", true)).setStateOn(true);
                        EWorldEditorToggleCamera.setBitmap("tools/gui/images/menubar/smooth-cam");
                        flyModeRadioItem = 3;
                        EditorGuiStatusBar.call("setCamera", "Smooth Camera");
                    }
                }
                else if (mode == Camera__CameraMotionMode.EditOrbitMode)
                {
                    ((coGuiIconButtonCtrl)EditorGui.findObjectByInternalName("OrbitCamera", true)).setStateOn(true);
                    EWorldEditorToggleCamera.setBitmap("tools/gui/images/menubar/orbit-cam");
                    flyModeRadioItem = 1;
                    EditorGuiStatusBar.call("setCamera", "Orbit Camera");
                }
                else // default camera mode
                {
                    ((coGuiIconButtonCtrl)EditorGui.findObjectByInternalName("StandardCamera", true)).setStateOn(true);
                    EWorldEditorToggleCamera.setBitmap("tools/worldEditor/images/toolbar/camera");
                    flyModeRadioItem = 0;
                    EditorGuiStatusBar.call("setCamera", "Standard Camera");
                }

                //quick way select menu bar options
                ((coGuiControl)thisObj.call("findMenu", "Camera")).call("checkRadioItem", "0", "1", "0");

                EditorFreeCameraTypeOptions.checkRadioItem("0", "4", flyModeRadioItem.AsString());
                EditorPlayerCameraTypeOptions.checkRadioItem("0", "4", "-1");
            }
            else if (!bGlobal["$isFirstPersonVar"]) // if 3rd person
            {
                ((coGuiIconButtonCtrl)EditorGui.findObjectByInternalName("trdPersonCamera", true)).setStateOn(true);
                EWorldEditorToggleCamera.setBitmap("tools/worldEditor/images/toolbar/3rd-person-camera");
                flyModeRadioItem = 1;
                //quick way select menu bar options
                ((coGuiControl)thisObj.call("findMenu", "Camera")).call("checkRadioItem", "0", "1", "1");
                EditorPlayerCameraTypeOptions.checkRadioItem("0", "2", flyModeRadioItem.AsString());
                EditorGuiStatusBar.call("setCamera", "3rd Person Camera");
            }
            else if (bGlobal["$isFirstPersonVar"]) // if 1st Person
            {
                ((coGuiIconButtonCtrl)EditorGui.findObjectByInternalName("PlayerCamera", true)).setStateOn(true);
                EWorldEditorToggleCamera.setBitmap("tools/worldEditor/images/toolbar/player");
                flyModeRadioItem = 0;
                //quick way select menu bar options
                ((coGuiControl)thisObj.call("findMenu", "Camera")).call("checkRadioItem", "0", "1", "1");
                EditorPlayerCameraTypeOptions.checkRadioItem("0", "2", flyModeRadioItem.AsString());
                EditorFreeCameraTypeOptions.checkRadioItem("0", "4", "-1");
                EditorGuiStatusBar.call("setCamera", "1st Person Camera");
            }
        }

        [Torque_Decorations.TorqueCallBack("", "WorldEditorPlugin", "onActivated", "", 1, 2500, false)]
        public void WorldEditorPluginOnActivated(coSimObject thisObj, int nameSpaceDepth)
        {
            coGuiContainer EditorGui = console.GetObjectID("EditorGui");
            coWorldEditor EWorldEditor = console.GetObjectID("EWorldEditor");
            coGuiTreeViewCtrl EditorTree = console.GetObjectID("EditorTree");
            coSimGroup MissionGroup = console.GetObjectID("MissionGroup");
            coGuiWindowCtrl EWCreatorWindow = console.GetObjectID("EWCreatorWindow");
            EditorGui.bringToFront(EWorldEditor);
            EWorldEditor.setVisible(true);
            ((coMenuBar)EditorGui["menuBar"]).insert(EditorGui["worldMenu"], EditorGui["menuBar.dynamicItemInsertPos"]);
            EWorldEditor.makeFirstResponder("true");
            EditorTree.open(MissionGroup, "true");
            EWCreatorWindowSetNewObjectGroup(MissionGroup);

            EWorldEditor.call("syncGui");

            ((coGuiContainer)console.GetObjectID("EditorGuiStatusBar")).call("setSelectionObjectsByCount", EWorldEditor.getSelectionSize().AsString());

            // Should the Transform Selection window open?
            if (EWorldEditor["ETransformSelectionDisplayed"].AsBool())
            {
                ((coGuiControl)console.GetObjectID("ETransformSelection")).setVisible(true);
            }

            console.ParentExecute(thisObj, "onActivated", nameSpaceDepth, new string[] { });
        }

        [Torque_Decorations.TorqueCallBack("", "WorldEditorPlugin", "onDeactivated", "", 1, 2500, false)]
        public void WorldEditorPluginOnDeactivated(coSimObject thisObj, int nameSpaceDepth)
        {
            coWorldEditor EWorldEditor = console.GetObjectID("EWorldEditor");
            coGuiContainer EditorGui = console.GetObjectID("EditorGui");

            // Hide the Transform Selection window from other editors
            ((coGuiControl)console.GetObjectID("ETransformSelection")).setVisible(false);

            EWorldEditor.setVisible(false);
            ((coMenuBar)EditorGui["menuBar"]).remove(EditorGui["worldMenu"]);

            console.ParentExecute(thisObj, "onDeactivated", nameSpaceDepth, new string[] { });
        }

        [Torque_Decorations.TorqueCallBack("", "WorldEditorInspectorPlugin", "onWorldEditorStartup", "", 1, 2500, false)]
        public void WorldEditorInspectorPluginOnWorldEditorStartup(coSimObject thisObj, int nameSpaceDepth)
        {
            coWorldEditor EWorldEditor = console.GetObjectID("EWorldEditor");
            coGuiContainer EditorGui = console.GetObjectID("EditorGui");
            coScriptObject WorldEditorInspectorPlugin = console.GetObjectID("WorldEditorInspectorPlugin");

            console.ParentExecute(thisObj, "onWorldEditorStartup", nameSpaceDepth, new string[] { });

            // Add ourselves to the window menu.
            string accel = EditorGuiAddToEditorsMenu(EditorGui, "Object Editor", "", WorldEditorInspectorPlugin);

            // Add ourselves to the ToolsToolbar
            string tooltip = "Object Editor (" + accel + ")";
            EditorGuiAddToToolsToolbar(EditorGui, "WorldEditorInspectorPlugin", "WorldEditorInspectorPalette", Util._expandFilename("tools/worldEditor/images/toolbar/transform-objects"), tooltip);

            //connect editor windows
            console.Call_Classname("GuiWindowCtrl", "attach", new string[] { "EWInspectorWindow", "EWTreeWindow" });

            coActionMap map = new Torque_Class_Helper("ActionMap").Create();
            map.bindCmd("keyboard", "1", "EWorldEditorNoneModeBtn.performClick();", "");  // Select
            map.bindCmd("keyboard", "2", "EWorldEditorMoveModeBtn.performClick();", "");  // Move
            map.bindCmd("keyboard", "3", "EWorldEditorRotateModeBtn.performClick();", "");  // Rotate
            map.bindCmd("keyboard", "4", "EWorldEditorScaleModeBtn.performClick();", "");  // Scale
            map.bindCmd("keyboard", "f", "FitToSelectionBtn.performClick();", "");// Fit Camera to Selection
            map.bindCmd("keyboard", "z", "EditorGuiStatusBar.setCamera(\"Standard Camera\");", "");// Free camera
            map.bindCmd("keyboard", "n", "ToggleNodeBar->renderHandleBtn.performClick();", "");// Render Node
            map.bindCmd("keyboard", "shift n", "ToggleNodeBar->renderTextBtn.performClick();", "");// Render Node Text
            map.bindCmd("keyboard", "g", "ESnapOptions-->GridSnapButton.performClick();", ""); // Grid Snappping
            map.bindCmd("keyboard", "t", "SnapToBar->objectSnapDownBtn.performClick();", "");// Terrain Snapping
            map.bindCmd("keyboard", "b", "SnapToBar-->objectSnapBtn.performClick();", ""); // Soft Snappping
            map.bindCmd("keyboard", "v", "EWorldEditorToolbar->boundingBoxColBtn.performClick();", "");// Bounds Selection
            map.bindCmd("keyboard", "o", "objectCenterDropdown->objectBoxBtn.performClick(); objectCenterDropdown.toggle();", "");// Object Center
            map.bindCmd("keyboard", "p", "objectCenterDropdown->objectBoundsBtn.performClick(); objectCenterDropdown.toggle();", "");// Bounds Center
            map.bindCmd("keyboard", "k", "objectTransformDropdown->objectTransformBtn.performClick(); objectTransformDropdown.toggle();", "");// Object Transform
            map.bindCmd("keyboard", "l", "objectTransformDropdown->worldTransformBtn.performClick(); objectTransformDropdown.toggle();", "");// World Transform

            WorldEditorInspectorPlugin["map"] = map;
        }

        [Torque_Decorations.TorqueCallBack("", "WorldEditorInspectorPlugin", "onActivated", "", 1, 2500, false)]
        public void WorldEditorInspectorPluginOnActivated(coSimObject thisObj, int nameSpaceDepth)
        {
            coGuiContainer EditorGui = console.GetObjectID("EditorGui");

            console.ParentExecute(thisObj, "onActivated", nameSpaceDepth, new string[] {});

            ((coGuiControl)EditorGui.findObjectByInternalName("InspectorWindow", true)).setVisible(true);
            ((coGuiControl)EditorGui.findObjectByInternalName("TreeWindow", true)).setVisible(true);
            ((coGuiControl)EditorGui.findObjectByInternalName("WorldEditorToolbar", true)).setVisible(true);

            ((coActionMap)thisObj["map"]).push();
        }

        [Torque_Decorations.TorqueCallBack("", "WorldEditorInspectorPlugin", "onDeactivated", "", 1, 2500, false)]
        public void WorldEditorInspectorPluginOnDeactivated(coSimObject thisObj, int nameSpaceDepth)
        {
            coGuiContainer EditorGui = console.GetObjectID("EditorGui");

            console.ParentExecute(thisObj, "onDeactivated", nameSpaceDepth, new string[] {});

            ((coGuiControl)EditorGui.findObjectByInternalName("InspectorWindow", true)).setVisible(false);
            ((coGuiControl)EditorGui.findObjectByInternalName("TreeWindow", true)).setVisible(false);
            ((coGuiControl)EditorGui.findObjectByInternalName("WorldEditorToolbar", true)).setVisible(false);

            ((coActionMap)thisObj["map"]).pop();
        }

        [Torque_Decorations.TorqueCallBack("", "WorldEditorInspectorPlugin", "onEditMenuSelect", "", 2, 2500, false)]
        public void WorldEditorInspectorPluginOnEditMenuSelect(coSimObject thisObj, coPopupMenu editMenu)
        {
            coWorldEditor EWorldEditor = console.GetObjectID("EWorldEditor");
            bool canCutCopy = EWorldEditor.getSelectionSize() > 0;
            editMenu.enableItem("3", canCutCopy.AsString()); // Cut
            editMenu.enableItem("4", canCutCopy.AsString()); // Copy      
            editMenu.enableItem("5", EWorldEditor.canPasteSelection().AsString()); // Paste

            int selSize = EWorldEditor.getSelectionSize();
            int lockCount = EWorldEditor.call("getSelectionLockCount").AsInt();
            int hideCount = EWorldEditor.call("getSelectionHiddenCount").AsInt();
            editMenu.enableItem("6", (selSize > 0 && lockCount != selSize).AsString()); // Delete Selection

            editMenu.enableItem("8", canCutCopy.AsString()); // Deselect  
        }

        [Torque_Decorations.TorqueCallBack("", "WorldEditorInspectorPlugin", "handleDelete", "", 1, 2500, false)]
        public void WorldEditorInspectorPluginHandleDelete(coSimObject thisObj)
        {
            // The tree handles deletion and notifies the
            // world editor to clear its selection.  
            //
            // This is because non-SceneObject elements like
            // SimGroups also need to be destroyed.
            //
            // See EditorTree::onObjectDeleteCompleted().
            int selSize = ((coWorldEditor)console.GetObjectID("EWorldEditor")).getSelectionSize();
            if (selSize > 0)
                ((coGuiTreeViewCtrl)console.GetObjectID("EditorTree")).deleteSelection();
        }

        [Torque_Decorations.TorqueCallBack("", "WorldEditorInspectorPlugin", "handleDeselect", "", 1, 2500, false)]
        public void WorldEditorInspectorPluginHandleDeselect()
        {
           ((coWorldEditor)console.GetObjectID("EWorldEditor")).clearSelection();
        }

        [Torque_Decorations.TorqueCallBack("", "WorldEditorInspectorPlugin", "handleCut", "", 1, 2500, false)]
        public void WorldEditorInspectorPluginHandleCut()
        {
           ((coWorldEditor)console.GetObjectID("EWorldEditor")).cutSelection();
        }

        [Torque_Decorations.TorqueCallBack("", "WorldEditorInspectorPlugin", "handleCopy", "", 1, 2500, false)]
        public void WorldEditorInspectorPluginHandleCopy()
        {
           ((coWorldEditor)console.GetObjectID("EWorldEditor")).copySelection();
        }

        [Torque_Decorations.TorqueCallBack("", "WorldEditorInspectorPlugin", "handlePaste", "", 1, 2500, false)]
        public void WorldEditorInspectorPluginHandlePaste()
        {
           ((coWorldEditor)console.GetObjectID("EWorldEditor")).pasteSelection();
        }

        [Torque_Decorations.TorqueCallBack("", "TerrainEditorPlugin", "onWorldEditorStartup", "", 1, 2500, false)]
        public void TerrainEditorPluginOnWorldEditorStartup(coSimObject thisObj, int nameSpaceDepth)
        {
            coGuiContainer EditorGui = console.GetObjectID("EditorGui");
            coScriptObject TerrainEditorPlugin = console.GetObjectID("TerrainEditorPlugin");

            console.ParentExecute(thisObj, "onWorldEditorStartup", nameSpaceDepth, new string[] {} ); 
   
           // Add ourselves to the window menu.
            string accel = EditorGuiAddToEditorsMenu(EditorGui, "Terrain Editor", "", TerrainEditorPlugin );
   
           // Add ourselves to the ToolsToolbar
           string tooltip = "Terrain Editor (" + accel + ")";   
           EditorGuiAddToToolsToolbar( EditorGui, "TerrainEditorPlugin", "TerrainEditorPalette", Util._expandFilename("tools/worldEditor/images/toolbar/sculpt-terrain"), tooltip );
   
           coActionMap map = new Torque_Class_Helper("ActionMap").Create();   
           map.bindCmd( "keyboard", "1", "ToolsPaletteArray->brushAdjustHeight.performClick();", "" );    //Grab Terrain
           map.bindCmd( "keyboard", "2", "ToolsPaletteArray->raiseHeight.performClick();", "" );     // Raise Height
           map.bindCmd( "keyboard", "3", "ToolsPaletteArray->lowerHeight.performClick();", "" );     // Lower Height
           map.bindCmd( "keyboard", "4", "ToolsPaletteArray->smoothHeight.performClick();", "" );    // Average Height
           map.bindCmd( "keyboard", "5", "ToolsPaletteArray->smoothSlope.performClick();", "" );    // Smooth Slope
           map.bindCmd( "keyboard", "6", "ToolsPaletteArray->paintNoise.performClick();", "" );      // Noise
           map.bindCmd( "keyboard", "7", "ToolsPaletteArray->flattenHeight.performClick();", "" );   // Flatten
           map.bindCmd( "keyboard", "8", "ToolsPaletteArray->setHeight.performClick();", "" );       // Set Height
           map.bindCmd( "keyboard", "9", "ToolsPaletteArray->setEmpty.performClick();", "" );    // Clear Terrain
           map.bindCmd( "keyboard", "0", "ToolsPaletteArray->clearEmpty.performClick();", "" );  // Restore Terrain
           map.bindCmd( "keyboard", "v", "EWTerrainEditToolbarBrushType->ellipse.performClick();", "" );// Circle Brush
           map.bindCmd( "keyboard", "b", "EWTerrainEditToolbarBrushType->box.performClick();", "" );// Box Brush
           map.bindCmd( "keyboard", "=", "TerrainEditorPlugin.keyboardModifyBrushSize(1);", "" );// +1 Brush Size
           map.bindCmd( "keyboard", "+", "TerrainEditorPlugin.keyboardModifyBrushSize(1);", "" );// +1 Brush Size
           map.bindCmd( "keyboard", "-", "TerrainEditorPlugin.keyboardModifyBrushSize(-1);", "" );// -1 Brush Size
           map.bindCmd( "keyboard", "[", "TerrainEditorPlugin.keyboardModifyBrushSize(-5);", "" );// -5 Brush Size
           map.bindCmd( "keyboard", "]", "TerrainEditorPlugin.keyboardModifyBrushSize(5);", "" );// +5 Brush Size
           /*map.bindCmd( keyboard, "]", "TerrainBrushPressureTextEditContainer->textEdit.text += 5", "" );// +5 Pressure
           map.bindCmd( keyboard, "[", "TerrainBrushPressureTextEditContainer->textEdit.text -= 5", "" );// -5 Pressure
           map.bindCmd( keyboard, "'", "TerrainBrushSoftnessTextEditContainer->textEdit.text += 5", "" );// +5 Softness
           map.bindCmd( keyboard, ";", "TerrainBrushSoftnessTextEditContainer->textEdit.text -= 5", "" );// -5 Softness*/
   
            TerrainEditorPlugin["map"] = map;  
            coPopupMenu terrainMenu = new Torque_Class_Helper("PopupMenu").Create();
            terrainMenu.superClass = "MenuBuilder";
            terrainMenu.barTitle = "Terrain";
            terrainMenu["item[0]"] = "Smooth Heightmap\t\tETerrainEditor.onSmoothHeightmap();";
        }

        [Torque_Decorations.TorqueCallBack("", "TerrainEditorPlugin", "onActivated", "", 1, 2500, false)]
        public void TerrainEditorPluginOnActivated(coSimObject thisObj, int nameSpaceDepth)
        {
            coGuiContainer EditorGui = console.GetObjectID("EditorGui");
            coSettings EditorSettings = console.GetObjectID("EditorSettings");
            coScriptObject TerrainEditorPlugin = console.GetObjectID("TerrainEditorPlugin");
            coWorldEditor ETerrainEditor = console.GetObjectID("TerrainEditor");
            coGuiDynamicCtrlArrayControl ToolsPaletteArray = console.GetObjectID("ToolsPaletteArray");
            coGuiControl EWTerrainEditToolbarBrushType = console.GetObjectID("EWTerrainEditToolbarBrushType");
            coGuiControl EWTerrainEditToolbar = console.GetObjectID("EWTerrainEditToolbar");
            coGuiContainer EditorGuiStatusBar = console.GetObjectID("EditorGuiStatusBar");

            console.ParentExecute(thisObj, "onActivated", nameSpaceDepth, new string[] { });
            
            EditorGui.call("readTerrainEditorSettings");
   
            string action = EditorSettings.value("TerrainEditor/currentAction");
            ETerrainEditor.call("switchAction", action );
            ((coSimObject)ToolsPaletteArray.findObjectByInternalName( action, true )).call("setStateOn", "true" );

            ((coGuiControl)EWTerrainEditToolbarBrushType.findObjectByInternalName("ellipse", false)).call("performClick"); // Circle brush
   
            ((coMenuBar)EditorGui["menuBar"]).insert( thisObj["terrainMenu"], EditorGui["menuBar.dynamicItemInsertPos"] );
         
            EditorGui.bringToFront( ETerrainEditor );
            ETerrainEditor.setVisible( true );
            ETerrainEditor.call("attachTerrain");
            ETerrainEditor.call("makeFirstResponder", "true" );
        
            EWTerrainEditToolbar.setVisible( true );
            ETerrainEditor.call("onBrushChanged");
            ETerrainEditor.call("setup");
            TerrainEditorPlugin.call("syncBrushInfo");

            EditorGuiStatusBar.call("setSelection", "");
            ((coActionMap)thisObj["map"]).push();
        }

        [Torque_Decorations.TorqueCallBack("", "TerrainEditorPlugin", "onDeactivated", "", 1, 2500, false)]
        public void TerrainEditorPluginOnDeactivated(coSimObject thisObj, int nameSpaceDepth)
        {
            coGuiContainer EditorGui = console.GetObjectID("EditorGui");
            coGuiControl EWTerrainEditToolbar = console.GetObjectID("EWTerrainEditToolbar");
            coWorldEditor ETerrainEditor = console.GetObjectID("TerrainEditor");

            console.ParentExecute(thisObj, "onDeactivated", nameSpaceDepth, new string[] { });
            console.Call("endToolTime", "TerrainEditor");

            EditorGui.call("writeTerrainEditorSettings");

            EWTerrainEditToolbar.setVisible( false );
            ETerrainEditor.setVisible( false );

            ((coGuiControl)EditorGui["menuBar"]).remove( thisObj["terrainMenu"] );

            ((coActionMap)thisObj["map"]).pop();
        }

        [Torque_Decorations.TorqueCallBack("", "TerrainEditorPlugin", "syncBrushInfo", "", 1, 2500, false)]
        public void TerrainEditorPluginSyncBrushInfo(coSimObject thisObj)
        {
            coWorldEditor ETerrainEditor = console.GetObjectID("ETerrainEditor");
            coGuiControl TerrainBrushSizeTextEditContainer = console.GetObjectID("TerrainBrushSizeTextEditContainer");
            coGuiControl TerrainBrushPressureTextEditContainer = console.GetObjectID("TerrainBrushPressureTextEditContainer");
            coGuiControl TerrainBrushSoftnessTextEditContainer = console.GetObjectID("TerrainBrushSoftnessTextEditContainer");
            coGuiControl TerrainSetHeightTextEditContainer = console.GetObjectID("TerrainSetHeightTextEditContainer");
            // Update gui brush info
            ((coGuiTextEditCtrl)TerrainBrushSizeTextEditContainer.findObjectByInternalName("textEdit", true)).text = ETerrainEditor.call("getBrushSize").Split(' ')[0];
            ((coGuiTextEditCtrl)TerrainBrushPressureTextEditContainer.findObjectByInternalName("textEdit", true)).text = (ETerrainEditor.call("getBrushPressure").AsFloat() * 100.0f).AsString();
            ((coGuiTextEditCtrl)TerrainBrushSoftnessTextEditContainer.findObjectByInternalName("textEdit", true)).text = (ETerrainEditor.call("getBrushSoftness").AsFloat() * 100.0f).AsString();
            ((coGuiTextEditCtrl)TerrainSetHeightTextEditContainer.findObjectByInternalName("textEdit", true)).text = ETerrainEditor["setHeightVal"];

            string brushType = ETerrainEditor.call("getBrushType");
            console.Eval( "EWTerrainEditToolbar-->" + brushType + ".setStateOn(1);" );
        }

        [Torque_Decorations.TorqueCallBack("", "TerrainEditorPlugin", "validateBrushSize", "", 1, 2500, false)]
        public void TerrainEditorPluginValidateBrushSize(coSimObject thisObj)
        {
            coWorldEditor ETerrainEditor = console.GetObjectID("ETerrainEditor");
            float minBrushSize = 1;
            float maxBrushSize = ETerrainEditor["maxBrushSize"].Split(' ')[0].AsFloat();

            float val = ((coGuiTextEditCtrl)sGlobal["$ThisControl"]).getText().AsFloat();
            if(val < minBrushSize)
                ((coGuiTextEditCtrl)sGlobal["$ThisControl"]).setValue(minBrushSize.AsString());
            else if(val > maxBrushSize)
                ((coGuiTextEditCtrl)sGlobal["$ThisControl"]).setValue(maxBrushSize.AsString());
        }

        [Torque_Decorations.TorqueCallBack("", "TerrainEditorPlugin", "keyboardModifyBrushSize", "", 2, 2500, false)]
        public void TerrainEditorPluginKeyboardModifyBrushSize(coSimObject thisObj, float amt)
        {
            coGuiControl TerrainBrushSizeTextEditContainer = console.GetObjectID("TerrainBrushSizeTextEditContainer");
            coWorldEditor ETerrainEditor = console.GetObjectID("ETerrainEditor");

            float val = ((coGuiTextEditCtrl)TerrainBrushSizeTextEditContainer.findObjectByInternalName("textEdit", true)).getText().AsFloat();
            val += amt;
            ((coGuiTextEditCtrl)TerrainBrushSizeTextEditContainer.findObjectByInternalName("textEdit", true)).setValue(val.AsString());
            ((coGuiTextEditCtrl)TerrainBrushSizeTextEditContainer.findObjectByInternalName("textEdit", true)).forceValidateText();
            ETerrainEditor.call("setBrushSize", ((coGuiTextEditCtrl)TerrainBrushSizeTextEditContainer.findObjectByInternalName("textEdit", true)).getText() );
        }

        [Torque_Decorations.TorqueCallBack("", "TerrainTextureEditorTool", "onActivated", "", 1, 2500, false)]
        public void TerrainTextureEditorToolOnActivated(coSimObject thisObj)
        {
            coGuiContainer EditorGui = console.GetObjectID("EditorGui");
            coWorldEditor ETerrainEditor = console.GetObjectID("ETerrainEditor");

           EditorGui.bringToFront( ETerrainEditor );
           ETerrainEditor.setVisible( true );
           ETerrainEditor.call("attachTerrain");
           ETerrainEditor.call("makeFirstResponder", "true" );
   
            ((coGuiControl)EditorGui.findObjectByInternalName("TextureEditor", true)).setVisible(true);
            
           ((coGuiContainer)console.GetObjectID("EditorGuiStatusBar")).call("setSelection", "");
        }

        [Torque_Decorations.TorqueCallBack("", "TerrainTextureEditorTool", "onDeactivated", "", 1, 2500, false)]
        public void TerrainTextureEditorToolOnDeactivated(coSimObject thisObj)
        {
           ((coGuiContainer)((coGuiContainer)console.GetObjectID("EditorGui")).findObjectByInternalName("TextureEditor", true)).setVisible(false); 
       
           ((coWorldEditor)console.GetObjectID("ETerrainEditor")).setVisible( false );
        }

        [Torque_Decorations.TorqueCallBack("", "TerrainPainterPlugin", "onWorldEditorStartup", "", 1, 2500, false)]
        public void TerrainPainterPluginOnWorldEditorStartup(coSimObject thisObj, int nameSpaceDepth)
        {
            coGuiContainer EditorGui = console.GetObjectID("EditorGui");

            console.ParentExecute(thisObj, "onWorldEditorStartup", nameSpaceDepth);
   
           // Add ourselves to the window menu.
           string accel =  EditorGuiAddToEditorsMenu(EditorGui, "Terrain Painter", "", console.GetObjectID("TerrainPainterPlugin").AsString() );
   
           // Add ourselves to the ToolsToolbar
           string tooltip = "Terrain Painter (" + accel + ")"; 
            EditorGuiAddToToolsToolbar(EditorGui, "TerrainPainterPlugin", "TerrainPainterPalette", Util._expandFilename("tools/worldEditor/images/toolbar/paint-terrain"), tooltip );

           coActionMap map = new Torque_Class_Helper("ActionMap").Create();   
           map.bindCmd( "keyboard", "v", "EWTerrainPainterToolbarBrushType->ellipse.performClick();", "" );// Circle Brush
           map.bindCmd( "keyboard", "b", "EWTerrainPainterToolbarBrushType->box.performClick();", "" );// Box Brush
           map.bindCmd( "keyboard", "=", "TerrainPainterPlugin.keyboardModifyBrushSize(1);", "" );// +1 Brush Size
           map.bindCmd( "keyboard", "+", "TerrainPainterPlugin.keyboardModifyBrushSize(1);", "" );// +1 Brush Size
           map.bindCmd( "keyboard", "-", "TerrainPainterPlugin.keyboardModifyBrushSize(-1);", "" );// -1 Brush Size
           map.bindCmd( "keyboard", "[", "TerrainPainterPlugin.keyboardModifyBrushSize(-5);", "" );// -5 Brush Size
           map.bindCmd( "keyboard", "]", "TerrainPainterPlugin.keyboardModifyBrushSize(5);", "" );// +5 Brush Size
           /*map.bindCmd( keyboard, "]", "PaintBrushSlopeControl->SlopeMinAngle.text += 5", "" );// +5 SlopeMinAngle
           map.bindCmd( keyboard, "[", "PaintBrushSlopeControl->SlopeMinAngle.text -= 5", "" );// -5 SlopeMinAngle
           map.bindCmd( keyboard, "'", "PaintBrushSlopeControl->SlopeMaxAngle.text += 5", "" );// +5 SlopeMaxAngle
           map.bindCmd( keyboard, ";", "PaintBrushSlopeControl->SlopeMaxAngle.text -= 5", "" );// -5 Softness*/

           for(int i=1; i<10; i++)
           {
              map.bindCmd( "keyboard", i.AsString(), "TerrainPainterPlugin.keyboardSetMaterial(" + (i-1) + ");", "" );
           }
           map.bindCmd( "keyboard", "0", "TerrainPainterPlugin.keyboardSetMaterial(10);", "" );
   
           ((coSimObject)console.GetObjectID("TerrainPainterPlugin"))["map"] = map;
            console.Call_Classname("GuiWindowCtrl", "attach", "EPainter", "EPainterPreview");
        }

        [Torque_Decorations.TorqueCallBack("", "TerrainPainterPlugin", "onActivated", "", 1, 2500, false)]
        public void TerrainPainterPluginOnActivated(coSimObject thisObj, int nameSpaceDepth)
        {
            coGuiContainer EditorGui = console.GetObjectID("EditorGui");
            coGuiControl EWTerrainPainterToolbarBrushType = console.GetObjectID("EWTerrainPainterToolbarBrushType");
            coTerrainEditor ETerrainEditor = console.GetObjectID("ETerrainEditor");

            console.ParentExecute(thisObj, nameSpaceDepth, new string[] {});

            EditorGui.call("readTerrainEditorSettings");

            ((coGuiBitmapButtonCtrl)EWTerrainPainterToolbarBrushType.findObjectByInternalName("ellipse", false)).performClick();// Circle Brush
            ((coActionMap)thisObj["map"]).push();

            EditorGui.bringToFront( ETerrainEditor );
            ETerrainEditor.setVisible( true );
            ETerrainEditor.call("attachTerrain");
            ETerrainEditor.makeFirstResponder("true");

            ((coGuiWindowCollapseCtrl)EditorGui.findObjectByInternalName("TerrainPainter", true)).setVisible(true);
            ((coGuiWindowCollapseCtrl)EditorGui.findObjectByInternalName("TerrainPainterPreview", true)).setVisible(true);
            ((coGuiControl)console.GetObjectID("EWTerrainPainterToolbar")).setVisible(true);
            ETerrainEditor.call("onBrushChanged");
            ((coGuiWindowCollapseCtrl)console.GetObjectID("EPainter")).call("setup");
            ((coScriptObject)console.GetObjectID("TerrainPainterPlugin")).call("syncBrushInfo");

            ((coGuiContainer)console.GetObjectID("EditorGuiStatusBar")).call("setSelection","");
        }
        [Torque_Decorations.TorqueCallBack("", "TerrainPainterPlugin", "onDeactivated", "(%this,nameSpaceDepth)", 1, 2500, false)]
        public void TerrainPainterPluginOnDeactivated(coSimObject thisObj, int nameSpaceDepth)
        {
            coGuiContainer EditorGui = console.GetObjectID("EditorGui");

            console.ParentExecute(thisObj, "onDeactivated", nameSpaceDepth, new string[] {});

            EditorGui.call("writeTerrainEditorSettings");
            ((coActionMap)thisObj["map"]).pop();
            ((coGuiWindowCollapseCtrl)EditorGui.findObjectByInternalName("TerrainPainter", true)).setVisible(false);
            ((coGuiWindowCollapseCtrl)EditorGui.findObjectByInternalName("TerrainPainterPreview", true)).setVisible(false);
            ((coGuiControl)console.GetObjectID("EWTerrainPainterToolbar")).setVisible(false);
            ((coTerrainEditor)console.GetObjectID("ETerrainEditor")).setVisible(false);
          
        }
        [Torque_Decorations.TorqueCallBack("", "TerrainPainterPlugin", "syncBrushInfo", "", 1, 2500, false)]
        public void TerrainPainterPluginSyncBrushInfo(coSimObject thisObj)
        {
            coTerrainEditor ETerrainEditor = console.GetObjectID("ETerrainEditor");
            coGuiControl PaintBrushSlopeControl = console.GetObjectID("PaintBrushSlopeControl");
            // Update gui brush info
            ((coGuiTextEditCtrl)((coGuiControl)console.GetObjectID("PaintBrushSizeTextEditContainer")).findObjectByInternalName("textEdit", true)).text = ETerrainEditor.call("getBrushSize").Split(' ')[0];
            ((coGuiTextEditCtrl)PaintBrushSlopeControl.findObjectByInternalName("SlopeMinAngle", true)).text = ETerrainEditor.call("getSlopeLimitMinAngle");
            ((coGuiTextEditCtrl)PaintBrushSlopeControl.findObjectByInternalName("SlopeMaxAngle", true)).text = ETerrainEditor.call("getSlopeLimitMaxAngle");
        ((coGuiTextEditCtrl)((coGuiControl)console.GetObjectID("PaintBrushPressureTextEditContainer")).findObjectByInternalName("textEdit", true)).text = (ETerrainEditor.call("getBrushPressure").AsFloat() * 100.0f).AsString();
            string brushType = ETerrainEditor.call("getBrushType");
            console.Eval( "EWTerrainPainterToolbar-->" + brushType + ".setStateOn(1);" );
        }

        [Torque_Decorations.TorqueCallBack("", "TerrainPainterPlugin", "validateBrushSize", "", 1, 2500, false)]
        public void TerrainPainterPluginValidateBrushSize(coScriptObject thisObj)
        {
            coTerrainEditor ETerrainEditor = console.GetObjectID("ETerrainEditor");

            float minBrushSize = 1;
            float maxBrushSize = ETerrainEditor["maxBrushSize"].Split(' ')[0].AsFloat();
            coGuiTextEditCtrl ThisControl = sGlobal["ThisControl"];
            float val = ThisControl.getText().AsFloat();
            if (val < minBrushSize)
                ThisControl.setValue(minBrushSize.AsString());
            else if (val > maxBrushSize)
                ThisControl.setValue(maxBrushSize.AsString());
        }

        [Torque_Decorations.TorqueCallBack("", "TerrainPainterPlugin", "validateSlopeMaxAngle", "", 1, 2500, false)]
        public void TerrainPainterPluginValidateSlopeMaxAngle(coSimObject thisObj)
        {
            coTerrainEditor ETerrainEditor = console.GetObjectID("ETerrainEditor");
            coGuiControl PaintBrushSlopeControl = console.GetObjectID("PaintBrushSlopeControl");
            float maxval = ETerrainEditor.call("getSlopeLimitMaxAngle").AsFloat();
            ((coGuiTextEditCtrl)PaintBrushSlopeControl.findObjectByInternalName("SlopeMaxAngle", true)).setText(maxval.AsString()); 
        }
        [Torque_Decorations.TorqueCallBack("", "TerrainPainterPlugin", "validateSlopeMinAngle", "", 1, 2500, false)]
        public void TerrainPainterPluginValidateSlopeMinAngle(coSimObject thisObj)
        {
            coTerrainEditor ETerrainEditor = console.GetObjectID("ETerrainEditor");
            coGuiControl PaintBrushSlopeControl = console.GetObjectID("PaintBrushSlopeControl");
            float minval = ETerrainEditor.call("getSlopeLimitMinAngle").AsFloat();
            ((coGuiTextEditCtrl)PaintBrushSlopeControl.findObjectByInternalName("SlopeMinAngle", true)).setText(minval.AsString());
        }
        [Torque_Decorations.TorqueCallBack("", "TerrainPainterPlugin", "keyboardModifyBrushSize", "", 2, 2500, false)]
        public void TerrainPainterPluginKeyboardModifyBrushSize(coSimObject thisObj, float amt)
        {
            coTerrainEditor ETerrainEditor = console.GetObjectID("ETerrainEditor");
            coGuiControl PaintBrushSizeTextEditContainer = console.GetObjectID("PaintBrushSizeTextEditContainer");
            coGuiTextEditCtrl textEdit = PaintBrushSizeTextEditContainer.findObjectByInternalName("textEdit",true);

            float val = textEdit.getText().AsFloat();
            val += amt;
            textEdit.setValue(val.AsString());
            textEdit.forceValidateText();
            ETerrainEditor.call("setBrushSize", textEdit.getText());
        }
        [Torque_Decorations.TorqueCallBack("", "TerrainPainterPlugin", "keyboardSetMaterial", "", 2, 2500, false)]
        public void TerrainPainterPluginKeyboardSetMaterial(coSimObject thisObj, string mat)
        {
            string name = "EPainterMaterialButton" + mat;
            coGuiControl ctrl = ((coGuiControl)console.GetObjectID("EPainter")).findObjectByInternalName(name, true);
            if(ctrl.isObject())
            {
                ctrl.call("performClick");
            }
        }
        [Torque_Decorations.TorqueCallBack("", "objectTransformDropdown", "toggle", "", 0, 2500, false)]
        public void objectTransformDropdownToggle()
        {
            coGuiContainer objectTransformDropdown = console.GetObjectID("objectTransformDropdown");
            coGuiContainer objectTransformDropdownDecoy = console.GetObjectID("objectTransformDropdownDecoy");
            coGuiControl EWorldEditorToolbar = console.GetObjectID("EWorldEditorToolbar");
            coGuiBitmapButtonCtrl objectTransform = EWorldEditorToolbar.findObjectByInternalName("objectTransform", true);

            if ( objectTransformDropdown.visible )
            {
                objectTransform.setStateOn(false);
                objectTransformDropdownDecoy.setVisible(false);
                objectTransformDropdownDecoy.setActive(false);
                objectTransformDropdown.setVisible(false);
            }
            else
            {
                objectTransform.setStateOn(true);
                objectTransformDropdown.setVisible(true);
                objectTransformDropdownDecoy.setActive(true);
                objectTransformDropdownDecoy.setVisible(true);
            }
         }
         [Torque_Decorations.TorqueCallBack("", "", " CameraTypesDropdownToggle", "", 0, 2500, false)]
         public void  CameraTypesDropdownToggle()
         {
            coGuiContainer CameraTypesDropdown = console.GetObjectID("CameraTypesDropdown");
            coGuiContainer CameraTypesDropdownDecoy = console.GetObjectID("CameraTypesDropdownDecoy");
            coGuiBitmapButtonCtrl EWorldEditorToggleCamera = console.GetObjectID("EWorldEditorToggleCamera");
            if ( CameraTypesDropdown.visible  )
            {
                  EWorldEditorToggleCamera.setStateOn(false);
                  CameraTypesDropdownDecoy.setVisible(false);
                  CameraTypesDropdownDecoy.setActive(false);
                  CameraTypesDropdown.setVisible(false);
            }
            else
            {
                  CameraTypesDropdown.setVisible(true);
                  CameraTypesDropdownDecoy.setVisible(true);
                  CameraTypesDropdownDecoy.setActive(true);
                  EWorldEditorToggleCamera.setStateOn(true);
            }
         }
         [Torque_Decorations.TorqueCallBack("", "", " VisibilityDropdownToggle", "", 1, 2500, false)]
         public void  VisibilityDropdownToggle(string )
         {
            coGuiWindowCtrl EVisibility = console.GetObjectID("EVisibility");
            coGuiBitmapButtonCtrl visibilityToggleBtn = console.GetObjectID("visibilityToggleBtn");
            if ( EVisibility.visible  )
            {
                  EVisibility.setVisible(false);
                  visibilityToggleBtn.setStateOn(false);
            }
            else
            {
                  EVisibility.setVisible(true);
                  visibilityToggleBtn.setStateOn(true);
            }
         }
         [Torque_Decorations.TorqueCallBack("", "CameraTypesDropdownDecoy", "onMouseLeave", "", 0, 2500, false)]
         public void CameraTypesDropdownDecoyOnMouseLeave()
         {
            CameraTypesDropdownToggle();
         }
         [Torque_Decorations.TorqueCallBack("", "EWorldEditor", "getGridSnap", "", 1, 2500, false)]
         public bool EWorldEditorGetGridSnap(coSimObject thisObj)
         {
            return thisObj["gridSnap"].AsBool();
         }
         [Torque_Decorations.TorqueCallBack("", "EWorldEditor", "setGridSnap", "", 2, 2500, false)]
         public void EWorldEditorSetGridSnap(coSimObject thisObj, bool value)
         {
            coGizmoProfile GlobalGizmoProfile = console.GetObjectID("GlobalGizmoProfile");
            thisObj["gridSnap"] = value.AsString();
            GlobalGizmoProfile.snapToGrid = value;
            thisObj.call("syncGui");
         }
         [Torque_Decorations.TorqueCallBack("", "EWorldEditor", "getGridSize", "", 1, 2500, false)]
         public float EWorldEditorGetGridSize(coSimObject thisObj)
         {
            return thisObj["gridSize"].AsFloat();
         }
         [Torque_Decorations.TorqueCallBack("", "EWorldEditor", "setGridSize", "", 2, 2500, false)]
         public void EWorldEditorSetGridSize(coSimObject thisObj, float value)
         {
            coGizmoProfile GlobalGizmoProfile = console.GetObjectID("GlobalGizmoProfile");
            GlobalGizmoProfile.gridSize = new Point3F(value, value, value);
            thisObj["gridSize"] = value.AsString();
   
            thisObj.call("syncGui");
         }
         [Torque_Decorations.TorqueCallBack("", "EWorldEditor", "areAllSelectedObjectsOfType", "", 2, 2500, false)]
         public bool EWorldEditorAreAllSelectedObjectsOfType(coWorldEditor thisObj, string className)
         {
            coGuiControl activeSelection = thisObj.getActiveSelection();
            if( !activeSelection.isObject() )
                  return false;
      
            int count = activeSelection.getCount();
            for( uint i = 0; i < count; i ++ )
            {
                  coSimObject obj = activeSelection.getObject( i );
                  if( !obj.isMemberOfClass( className ) )
                     return false;
            }
      
            return true;
         }
         [Torque_Decorations.TorqueCallBack("", "EWorldEditorToggleCamera", "toggleBitmap", "", 1, 2500, false)]
         public void EWorldEditorToggleCameraToggleBitmap(coWorldEditor thisObj)
         {
            string currentImage = thisObj["bitmap"];
            string image;
            if ( currentImage.Equals("tools/worldEditor/images/toolbar/player") )
               image = "tools/worldEditor/images/toolbar/camera";
            else
               image = "tools/worldEditor/images/toolbar/player";
            
            thisObj.call("setBitmap", image );
         }
         [Torque_Decorations.TorqueCallBack("", "EWorldEditorCameraSpeed", "updateMenuBar", "", 2, 2500, false)]
         public void EWorldEditorCameraSpeedUpdateMenuBar(coSimObject thisObj, coGuiTextEditCtrl editorBarCtrl)
         {
            coGuiMouseEventCtrl CameraSpeedDropdownCtrlContainer = console.GetObjectID("CameraSpeedDropdownCtrlContainer");
            coGuiSliderCtrl slider = CameraSpeedDropdownCtrlContainer.findObjectByInternalName("slider", true);
            coGuiTextEditCtrl EWorldEditorCameraSpeed = console.GetObjectID("EWorldEditorCameraSpeed");
            // Update Toolbar TextEdit
            if( editorBarCtrl.getId() == slider.getId() )
            {
               string value = editorBarCtrl.getValue();
               EWorldEditorCameraSpeed.setText( value );
               sGlobal["$Camera::movementSpeed"] = value;
            }

            // Update Toolbar Slider
            if( editorBarCtrl.getId() == EWorldEditorCameraSpeed.getId() )
            {
               float value = editorBarCtrl.getText().AsFloat();
               if ( !editorBarCtrl.getText().Equals("") )
               {
                  if ( value <= 0 )    // camera speed must be >= 0
                  {
                     value = 1;
                     editorBarCtrl.setText( value.AsString() );
                  }
                  slider.setValue( value.AsString() );
                  fGlobal["$Camera::movementSpeed"] = value;
               }
            }
   
            // Update Editor
            ((coPopupMenu)console.GetObjectID("EditorCameraSpeedOptions")).checkRadioItem("0", "6", "-1");
         }
         [Torque_Decorations.TorqueCallBack("", "EWorldEditorAlignPopup", "onSelect", "", 3, 2500, false)]
         public void EWorldEditorAlignPopupOnSelect(coSimObject thisObj, string id, GizmoAlignment text)
         {
            coGizmoProfile GlobalGizmoProfile = console.GetObjectID("GlobalGizmoProfile");
            coGuiPopUpMenuCtrl EWorldEditorAlignPopup = console.GetObjectID("EWorldEditorAlignPopup");
            if ( GlobalGizmoProfile.mode == GizmoMode.ScaleMode && text == GizmoAlignment.World )
            {
               EWorldEditorAlignPopup.setSelected("1");
               return;
            }
   
            GlobalGizmoProfile.alignment = text;
         }
         [Torque_Decorations.TorqueCallBack("", "EWorldEditorNoneModeBtn", "onClick", "", 1, 2500, false)]
         public void EWorldEditorNoneModeBtnOnClick(coSimObject thisObj)
         {
            coGizmoProfile GlobalGizmoProfile = console.GetObjectID("GlobalGizmoProfile");
            GlobalGizmoProfile.mode = GizmoMode.NoneMode;
            
            coGuiContainer EditorGuiStatusBar = console.GetObjectID("EditorGuiStatusBar");
            EditorGuiStatusBar.call("setInfo", "Selection arrow.");
         }
         [Torque_Decorations.TorqueCallBack("", "EWorldEditorMoveModeBtn", "onClick", "", 1, 2500, false)]
         public void EWorldEditorMoveModeBtnOnClick(coSimObject thisObj)
         {
            coGizmoProfile GlobalGizmoProfile = console.GetObjectID("GlobalGizmoProfile");
            GlobalGizmoProfile.mode = GizmoMode.MoveMode;
   
            string cmdCtrl = "CTRL";
            if( sGlobal["$platform"].Equals("macos") )
               cmdCtrl = "CMD";
   
            coGuiContainer EditorGuiStatusBar = console.GetObjectID("EditorGuiStatusBar");
            EditorGuiStatusBar.call("setInfo", "Move selection.  SHIFT while dragging duplicates objects.  " + cmdCtrl + " to toggle soft snap.  ALT to toggle grid snap." );
         }
         [Torque_Decorations.TorqueCallBack("", "EWorldEditorRotateModeBtn", "onClick", "", 1, 2500, false)]
         public void EWorldEditorRotateModeBtnOnClick(coSimObject thisObj)
         {
            coGizmoProfile GlobalGizmoProfile = console.GetObjectID("GlobalGizmoProfile");
            GlobalGizmoProfile.mode = GizmoMode.RotateMode;
   
            coGuiContainer EditorGuiStatusBar = console.GetObjectID("EditorGuiStatusBar");
            EditorGuiStatusBar.call("setInfo", "Rotate selection.");
         }
         [Torque_Decorations.TorqueCallBack("", "EWorldEditorScaleModeBtn", "onClick", "", 1, 2500, false)]
         public void EWorldEditorScaleModeBtnOnClick(coSimObject thisObj)
         {
            coGizmoProfile GlobalGizmoProfile = console.GetObjectID("GlobalGizmoProfile");
            GlobalGizmoProfile.mode = GizmoMode.ScaleMode;
   
            coGuiContainer EditorGuiStatusBar = console.GetObjectID("EditorGuiStatusBar");
            EditorGuiStatusBar.call("setInfo", "Scale selection.");
         }
         [Torque_Decorations.TorqueCallBack("", "EditorTree", "onDeleteSelection", "", 1, 2500, false)]
         public void EditorTreeOnDeleteSelection(coSimObject thisObj)
         {
            thisObj["undoDeleteList"] = "";   
         }
         [Torque_Decorations.TorqueCallBack("", "EditorTree", "onDeleteObject", "", 2, 2500, false)]
         public bool EditorTreeOnDeleteObject(coSimObject thisObj, coSimObject obj)
         {
            // Don't delete locked objects
            if( obj["locked"].AsBool() )
               return true;
            
            coGuiWindowCtrl EWCreatorWindow = console.GetObjectID("EWCreatorWindow");
            if( obj.Equals(EWCreatorWindow["objectGroup"]) )
               EWCreatorWindow.call("setNewObjectGroup", "MissionGroup" );

            // Append it to our list.
            thisObj["undoDeleteList"] = thisObj["undoDeleteList"] + "\t" + obj;
              
            // We're gonna delete this ourselves in the
            // completion callback.
            return true;
         }
         [Torque_Decorations.TorqueCallBack("", "EditorTree", "onObjectDeleteCompleted", "", 1, 2500, false)]
         public void EditorTreeOnObjectDeleteCompleted(coSimObject thisObj)
         {
            coWorldEditor EWorldEditor = console.GetObjectID("EWorldEditor");
            // This can be called when a deletion is attempted but nothing was
            // actually deleted ( cannot delete the root of the tree ) so only submit
            // the undo if we really deleted something.
            if ( !thisObj["undoDeleteList"].Equals("") )
               console.Call_Classname("MEDeleteUndoAction", "submit", thisObj["undoDeleteList"] );
   
            // Let the world editor know to 
            // clear its selection.
            EWorldEditor.clearSelection();
            EWorldEditor.isDirty = true;
         }
         [Torque_Decorations.TorqueCallBack("", "EditorTree", "onClearSelected", "", 1, 2500, false)]
         public void EditorTreeOnClearSelected(coSimObject thisObj)
         {
            WorldEditor.clearSelection();
         }
         [Torque_Decorations.TorqueCallBack("", "EditorTree", "onInspect", "", 2, 2500, false)]
         public void EditorTreeOnInspect(coSimObject thisObj, string obj)
         {
            coGuiInspector Inspector = console.GetObjectID("Inspector");
            Inspector.inspect(obj);   
         }
         [Torque_Decorations.TorqueCallBack("", "EditorTree", "toggleLock", "", 1, 2500, false)]
         public void EditorTreeToggleLock(coSimObject thisObj)
         {
            coGuiWindowCollapseCtrl EWTreeWindow = console.GetObjectID("EWTreeWindow");
            coGuiBitmapButtonCtrl LockSelection = EWTreeWindow.findObjectByInternalName("LockSelection", true);
            coGuiBitmapButtonCtrl DeleteSelection = EWTreeWindow.findObjectByInternalName("DeleteSelection", true);
            if( LockSelection["command"].Equals("EWorldEditor.lockSelection(true); EditorTree.toggleLock();") )
            {
               LockSelection["command"] = "EWorldEditor.lockSelection(false); EditorTree.toggleLock();";
               DeleteSelection["command"] = "";
            }
            else
            {
               LockSelection["command"] = "EWorldEditor.lockSelection(true); EditorTree.toggleLock();";
               DeleteSelection["command"] = "EditorMenuEditDelete();";
            }
         }
       [Torque_Decorations.TorqueCallBack("", "EditorTree", "onAddSelection", "", 3, 2500, false)]
      public void EditorTreeOnAddSelection(coSimObject thisObj, string obj, string isLastSelection)
      {
          coWorldEditor EWorldEditor = console.GetObjectID("EWorldEditor");
         EWorldEditor.selectObject( obj );
   
         int selSize = EWorldEditor.getSelectionSize();
         int lockCount = EWorldEditor.getSelectionLockCount();
   
         if( lockCount < selSize )
         {
            EWTreeWindow-->LockSelection.setStateOn(0);
            EWTreeWindow-->LockSelection.command = "EWorldEditor.lockSelection(true); EditorTree.toggleLock();";
         }
         else if ( lockCount > 0 )
         {
            EWTreeWindow-->LockSelection.setStateOn(1);
            EWTreeWindow-->LockSelection.command = "EWorldEditor.lockSelection(false); EditorTree.toggleLock();";
         }
   
         if( selSize > 0 && lockCount == 0 )
            EWTreeWindow-->DeleteSelection.command = "EditorMenuEditDelete();";
         else
            EWTreeWindow-->DeleteSelection.command = "";
   
         if( isLastSelection )
            Inspector.addInspect( obj );
         else  
            Inspector.addInspect( obj, false );
      
      }

    }
}
